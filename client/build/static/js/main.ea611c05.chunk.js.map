{"version":3,"sources":["ContainerApp/WorkPlace/Units/ProfileCard.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsItem.module.css","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactItem.module.css","serviceWorker.js","redux/authReducer.js","redux/navigationReducer.js","redux/dialogsListReducer.js","redux/searchNewUserReducer.js","redux/dialogBodyReducer.js","redux/textAreaReducer.js","redux/contactsReducer.js","redux/profileReducer.js","redux/reduxStore.js","vars_css/vars_css.js","ContainerApp/AuthPage/AuthPage.js","ContainerApp/AuthPage/AuthPageContainer.js","ContainerApp/WorkPlace/Navbar/Navbar.js","ContainerApp/WorkPlace/Navbar/NavbarContainer.js","ContainerApp/WorkPlace/Units/ProfileCard.js","ContainerApp/WorkPlace/Units/ChangeProfileCard.js","ContainerApp/WorkPlace/AppPages/ProfilePage/ProfilePage.js","ContainerApp/WorkPlace/AppPages/ProfilePage/ProfilePageContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsItem.js","img/icons/IconAdd.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsList.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsListContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/SearchNewUser.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/SearchNewUserContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/ContainerForSearchNewUser.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/MessageItem.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/DialogBody.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/DialogBodyContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/TextArea.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/TextAreaContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/Dialog.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsPage.js","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactItem.js","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsList.js","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsListContainer.js","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsPage.js","ContainerApp/WorkPlace/AppPages/AppPages.js","ContainerApp/WorkPlace/AppPages/AppPagesContainer.js","ContainerApp/WorkPlace/WorkPlace.js","ContainerApp/WorkPlace/WorkPlaceContainer.js","App.js","routes.js","AppContainer.js","index.js","ContainerApp/AuthPage/AuthPage.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/MessageItem.module.css","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsList.module.css","ContainerApp/WorkPlace/AppPages/ProfilePage/ProfilePage.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsList.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/SearchNewUser.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/DialogBody.module.css","ContainerApp/WorkPlace/WorkPlace.module.css","ContainerApp/WorkPlace/Navbar/Navbar.module.css","ContainerApp/WorkPlace/AppPages/AppPages.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsPage.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/Dialog.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/TextArea.module.css","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsPage.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","REGISTRATION","LOGIN","LOGOUT","initialeState","email","password","loginActionCreator","token","id","type","authReducer","state","action","userId","GET_NEW_MESSAGES","newMessages","navigationReducer","data","dialogId","UPLOAD_DIALOGS","CHECK_NEW_MESSAGES","RELOAD_DIALOGS","dialogsReducer","dialogs","isLoad","forEach","dialog","newMsgs","messages","length","lastMsg","upDialog","UPDATE_EMAIL","GET_NEW_USER","REDIRECT_NEW_USER","newContact","getNewUserActionCreator","changed","redirectNewUserActionCreator","redirect","searchNewUserReducer","update","ID_DIALOG","UPLOAD_DIALOG","currentDialog","dialogIdActionCreator","uploadDialogActionCreator","dialogBodyReducer","CHANGE_NEW_MESSAGE","newMessage","changeNewMessageActionCreator","textAreaReducer","UPLOAD_CONTACTS","RELOAD_CONTACTS","CONTACT_CARD","contactCardActionCreator","contactCard","contactsReducer","contacts","userBirthday","undefined","dataArr","split","slice","join","GET_USER_DATA","CHANGE_USER_DATA","UPDATE_USER_DATA","RELOAD_USER_DATA","changePage","getUserDataActionCreator","userData","changeUserDataActionCreator","change","updateDataActionCreator","itemName","itemValue","disabled","profileReducer","userPhoto","firstName","lastName","userSex","LOG_OUT","reducers","combineReducers","authPage","navBar","profilePage","dialogsList","dialogsListReducer","searchNewUser","dialogPage","textArea","contactsPage","store","createStore","localStorage","clear","varsCss","mainTextColor","mainColor","navTextColor","accentTextColor","accentColor","accentColorFill","AuthPage","props","btnArr","document","querySelectorAll","inputArr","changeState","e","querySelector","value","pass","target","name","registrationActionCreator","dispatch","postAuthData","btn","input","axios","method","url","authState","then","response","M","toast","html","message","setTimeout","reload","catch","error","JSON","parse","request","setItem","stringify","getAuthData","console","log","completeCallback","className","classes","body","container","cssVars","onChange","htmlFor","bntsSet","onClick","AuthPageContainer","connect","Navbar","dialogsCount","isShow","to","style","color","paddingLeft","NavbarContainer","ProfileCard","changeBtn","logoutBtn","redirectToDialog","contactAction","dialogAction","profile","backgroundImage","discriptionText","arr","btns","map","btnFunc","btnStyle","btnName","Math","random","ChangeProfileCard","changeInputs","selectedOptions","label","multiple","defaultValue","readOnly","d","m","dataset","month","Number","day","newDate","year","options","format","yearRange","changedData","socket","emit","ProfilePage","getItem","on","a","closeBtn","floating","icon","small","waves","ProfilePageContainer","DialogsItem","userInfo","photo","user_name","newMsgsContainer","IconAdd","xmlns","xmlnsXlink","version","x","y","viewBox","enableBackground","xmlSpace","width","fill","createDialogs","lastMsgs","push","sort","b","i","find","index","splice","unshift","this","exact","DialogsList","uploadDialogsActionCreator","preloaderContainer","content","DialogsListContainer","updateEmailActionCreator","SearchNewUser","searchResult","isContact","showItem","visibleClass","disabledInput","actions","marginTop","maxWidth","marginLeft","newContactId","header","image","marginBottom","contactEmail","React","Component","SearchNewUserContainer","ContainerForSearchNewUser","MessageItem","userName","senderClass","user","fromUser","fromInterlocutor","description","fromSystem","sender","messageBody","createMessageList","user1","user2","creation","DialogBody","getDialog","newDeliveredMessagesIdArr","delivered","_id","onScroll","scrollMessages","scrollTop","scrollHeight","DialogBodyContainer","TextArea","interlocutor","sendBtn","node","Date","now","TextAreaContainer","Dialog","DialogsPage","path","render","ContactItem","userFirstName","userLastName","createContacstList","contactsArr","emailsArr","namesArr","contact","emailsContactArr","item","namesContactArr","concat","ContactsList","ContactsListContainer","ContactsPage","getContactsActionCreator","AppPages","isDialogsLoad","AppPagesContainer","io","WorkPlace","newMsgsData","action1","newMessagesActionCreator","action2","actionContacts","initiator","actionSearchNewUser","WorkPlaceContainer","App","isAuthenticated","routes","useRoutes","AppContainer","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea611c05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ProfileCard_body__2QXNj\",\"userPhoto\":\"ProfileCard_userPhoto__Hka_2\",\"discriptionText\":\"ProfileCard_discriptionText__Fwqjt\",\"input\":\"ProfileCard_input__3JDuf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"DialogsItem_body__SEl4a\",\"userInfo\":\"DialogsItem_userInfo__2XhTS\",\"userPhoto\":\"DialogsItem_userPhoto__1wZOk\",\"user_name\":\"DialogsItem_user_name__3EyqU\",\"newMsgsContainer\":\"DialogsItem_newMsgsContainer__1yppQ\",\"newMsgs\":\"DialogsItem_newMsgs__36HlF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ContactItem_body__3C_nb\",\"userInfo\":\"ContactItem_userInfo__3GnzR\",\"userPhoto\":\"ContactItem_userPhoto__1ZrAL\",\"user_name\":\"ContactItem_user_name__WFAgm\",\"newMsgsContainer\":\"ContactItem_newMsgsContainer__1LLPS\",\"newMsgs\":\"ContactItem_newMsgs__2J5T6\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const REGISTRATION = 'REGISTRATION';\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nlet initialeState = {\n    email: \"\",\n    password: \"\"\n};\n\nconst authReducer = (state = initialeState, action) => {\n\n    switch (action.type) {\n        case REGISTRATION:\n            return {\n                ...state,\n                email: action.email,\n                password: action.password,\n            };\n\n        case LOGIN:\n            return {\n                ...state,\n                token: action.token,\n                userId: action.id,\n            };\n\n        case LOGOUT:\n            return {\n                ...state,\n                token: null,\n                userId: null,\n            }\n\n        default:\n            return state;\n    };\n};\n\nexport const registrationActionCreator = (email, password) => ({\n    type: REGISTRATION,\n    email: email,\n    password: password,\n});\nexport const loginActionCreator = (token, id) => ({\n    type: LOGIN,\n    token: token,\n    id: id,\n});\nexport const logoutActionCreator = () => ({\n    type: LOGOUT,\n});\n\nexport default authReducer;","const GET_NEW_MESSAGES = 'GET_NEW_MESSAGES';\n\nlet initialeState = {\n    newMessages: {}\n};\n\nconst navigationReducer = (state = initialeState, action) => {\n    switch (action.type) {\n        case GET_NEW_MESSAGES:\n            return {\n                ...state,\n                newMessages: {\n                    ...state.newMessages,\n                    [action.data.dialogId]: action.data,\n                },\n            };\n\n        default:\n            return state;\n    };\n};\n\nexport const newMessagesActionCreator = (data) => ({\n    type: GET_NEW_MESSAGES,\n    data\n});\n\nexport default navigationReducer;","const UPLOAD_DIALOGS = 'UPLOAD_DIALOGS';\nconst CHECK_NEW_MESSAGES = 'CHECK_NEW_MESSAGES';\nconst RELOAD_DIALOGS = 'RELOAD_DIALOGS';\n\nlet initialeState = {\n};\n\nconst dialogsReducer = (state = initialeState, action) => {\n\n    switch (action.type) {\n        case UPLOAD_DIALOGS:\n            return {\n                ...state,\n                dialogs: action.data,\n                isLoad: action.isLoad\n            };\n\n        case CHECK_NEW_MESSAGES:\n\n            if (state.dialogs) {\n                state.dialogs.forEach(dialog => {\n                    if (action.dialogId === dialog.dialogId) {\n                        dialog.newMsgs = action.messages.length;\n                        dialog.lastMsg = action.lastMsg;\n                    };\n                });\n            };\n\n            if (action.messages.length > 0) {\n                return {\n                    ...state,\n                    upDialog: action.dialogId\n                };\n            } else {\n                return {\n                    ...state,\n                    upDialog: ''\n                };\n            };\n\n        case RELOAD_DIALOGS:\n            return {\n                ...state,\n                isLoad: false\n            };\n\n        default:\n            return state;\n    };\n};\n\nexport const uploadDialogsActionCreator = (isLoad, data) => ({\n    type: UPLOAD_DIALOGS,\n    isLoad,\n    data\n});\n\nexport const checkNewMessagesOnDialogListActionCreator = (dialogId, messages, lastMsg) => ({\n    type: CHECK_NEW_MESSAGES,\n    dialogId,\n    messages,\n    lastMsg,\n});\n\nexport const reloadDialogsActionCreator = () => ({\n    type: RELOAD_DIALOGS,\n});\n\nexport default dialogsReducer;","const UPDATE_EMAIL = 'UPDATE_EMAIL';\nconst GET_NEW_USER = 'GET_NEW_USER';\nconst REDIRECT_NEW_USER = 'REDIRECT_NEW_USER';\n\nlet initialeState = {\n    newContact: {\n        email: '',\n    },\n};\n\nconst searchNewUserReducer = (state = initialeState, action) => {\n\n    switch (action.type) {\n        case UPDATE_EMAIL:\n            return {\n                newContact: {\n                    email: action.update\n                },\n                changed: action.changed,\n                isLoad: action.isLoad\n            };\n\n        case GET_NEW_USER:\n            if (action.data === null) action.data = { email: '' }\n            return {\n                newContact: action.data,\n                changed: action.changed,\n                isLoad: action.isLoad,\n            };\n\n        case REDIRECT_NEW_USER:\n\n            if (action.redirect === false) {\n                return {\n                    newContact: {\n                        email: '',\n                    },\n                };\n            };\n            return {\n                newContact: {\n                    email: '',\n                },\n                redirect: action.redirect,\n            };\n\n        default:\n            return state;\n    };\n};\n\nexport const updateEmailActionCreator = (update, changed, isLoad) => ({\n    type: UPDATE_EMAIL,\n    update,\n    changed,\n    isLoad\n});\nexport const getNewUserActionCreator = (data, changed, isLoad) => ({\n    type: GET_NEW_USER,\n    data,\n    changed,\n    isLoad\n});\nexport const redirectNewUserActionCreator = (redirect) => ({\n    type: REDIRECT_NEW_USER,\n    redirect,\n});\n\nexport default searchNewUserReducer;","const ID_DIALOG = 'ID_DIALOG';\nconst UPLOAD_DIALOG = 'UPLOAD_DIALOG';\n\nexport const dialogs = {\n    currentDialog: null,\n};\n\nlet initialeState = {\n    dialogId: '',\n    dialog: {\n        messages: [],\n    }\n};\n\nconst dialogBodyReducer = (state = initialeState, action) => {\n\n    switch (action.type) {\n\n        case ID_DIALOG:\n\n            dialogs.currentDialog = action.dialogId;\n\n            if (!dialogs[action.dialogId]) {\n                return {\n                    ...state,\n                    dialogId: action.dialogId,\n                    isLoad: false,\n                };\n            };\n            return {\n                ...state,\n                dialogId: action.dialogId,\n                dialog: dialogs[action.dialogId],\n                isLoad: true,\n            };\n\n\n        case UPLOAD_DIALOG:\n\n            dialogs[action.dialog.dialogId] = action.dialog;\n\n            return {\n                ...state,\n                dialog: dialogs[dialogs.currentDialog],\n                isLoad: true,\n            };\n\n        default:\n            return state;\n    };\n};\n\nexport const dialogIdActionCreator = (dialogId) => ({\n    type: ID_DIALOG,\n    dialogId\n});\nexport const uploadDialogActionCreator = (data) => ({\n    type: UPLOAD_DIALOG,\n    dialog: data,\n});\n\nexport default dialogBodyReducer;","const CHANGE_NEW_MESSAGE = 'CHANGE_NEW_MESSAGE';\n\nlet initialeState = {\n    newMessage: '',\n\n};\n\nconst textAreaReducer = (state = initialeState, action) => {\n\n    switch (action.type) {\n\n        case CHANGE_NEW_MESSAGE:\n            return {\n                newMessage: action.newMessage\n            };\n\n        default:\n            return state;\n    };\n};\n\nexport const changeNewMessageActionCreator = (newMessage) => ({\n    type: CHANGE_NEW_MESSAGE,\n    newMessage\n});\n\nexport default textAreaReducer;","const UPLOAD_CONTACTS = 'UPLOAD_CONTACTS';\nconst RELOAD_CONTACTS = 'RELOAD_CONTACTS';\nconst CONTACT_CARD = 'CONTACT_CARD';\n\nlet initialeState = {\n    isLoad: false\n};\n\nconst contactsReducer = (state = initialeState, action) => {\n\n    switch (action.type) {\n        case UPLOAD_CONTACTS:\n            return {\n                contacts: action.data,\n                isLoad: true,\n            };\n\n        case RELOAD_CONTACTS:\n            return {\n                ...state,\n                isLoad: false,\n            };\n        case CONTACT_CARD:\n            if (action.contactCard.userBirthday !== null && action.contactCard.userBirthday !== undefined) {\n                let dataArr = action.contactCard.userBirthday.split('');\n                action.contactCard.userBirthday = dataArr.slice(0, 10).join('');\n            };\n            return {\n                ...state,\n                contactCard: action.contactCard,\n            };\n\n        default:\n            return state;\n    };\n};\n\nexport const getContactsActionCreator = (data) => ({\n    type: UPLOAD_CONTACTS,\n    data,\n});\n\nexport const reloadContactsActionCreator = () => ({\n    type: RELOAD_CONTACTS,\n});\n\nexport const contactCardActionCreator = (contactCard) => ({\n    type: CONTACT_CARD,\n    contactCard,\n});\n\nexport default contactsReducer;","const GET_USER_DATA = 'GET_USER_DATA';\nconst CHANGE_USER_DATA = 'CHANGE_USER_DATA';\nconst UPDATE_USER_DATA = 'UPDATE_USER_DATA';\nconst RELOAD_USER_DATA = 'RELOAD_USER_DATA';\n\n\nlet initialeState = {\n    id: null,\n    changed: false,\n    changePage: false,\n};\n\nconst profileReducer = (state = initialeState, action) => {\n    switch (action.type) {\n        case GET_USER_DATA:\n            let userBirthday = null;\n            if (action.userData.userBirthday !== null && action.userData.userBirthday !== undefined) {\n                let dataArr = action.userData.userBirthday.split('');\n                userBirthday = dataArr.slice(0, 10).join('');\n            };\n            return {\n                id: action.userData.id,\n                userPhoto: action.userData.userPhoto,\n                firstName: action.userData.firstName,\n                lastName: action.userData.lastName,\n                email: action.userData.email,\n                userSex: action.userData.userSex,\n                userBirthday: userBirthday,\n                changed: false,\n                changePage: false,\n            };\n\n        case CHANGE_USER_DATA:\n            return {\n                ...state,\n                changePage: action.change\n            };\n\n        case UPDATE_USER_DATA:\n            return {\n                ...state,\n                [action.itemName]: action.itemValue,\n                changed: true\n            };\n\n        case RELOAD_USER_DATA:\n            return {\n                ...state,\n                id: action.id,\n            };\n\n        default:\n            return state;\n    };\n};\n\nexport const getUserDataActionCreator = (userData) => ({\n    type: GET_USER_DATA,\n    userData\n});\nexport const changeUserDataActionCreator = (change) => ({\n    type: CHANGE_USER_DATA,\n    change\n});\nexport const updateDataActionCreator = (itemName, itemValue, disabled) => ({\n    type: UPDATE_USER_DATA,\n    itemName,\n    itemValue,\n    disabled\n});\nexport const reloadActionCreator = (id) => ({\n    type: RELOAD_USER_DATA,\n    id\n});\n\nexport default profileReducer;","import { createStore, combineReducers } from \"redux\";\nimport authReducer from './authReducer.js';\nimport navigationReducer from './navigationReducer.js';\nimport dialogsListReducer from './dialogsListReducer.js';\nimport searchNewUserReducer from './searchNewUserReducer.js';\nimport dialogBodyReducer from './dialogBodyReducer.js';\nimport textAreaReducer from './textAreaReducer.js';\nimport contactsReducer from './contactsReducer.js';\nimport profileReducer from './profileReducer.js';\n\nconst LOG_OUT = \"LOG_OUT\";\n\nlet reducers = combineReducers({\n    authPage: authReducer,\n    navBar: navigationReducer,\n    profilePage: profileReducer,\n    dialogsList: dialogsListReducer,\n    searchNewUser: searchNewUserReducer,\n    dialogPage: dialogBodyReducer,\n    textArea: textAreaReducer,\n    contactsPage: contactsReducer,\n});\n\nlet appStore = (state, action) => {\n    if (action.type === LOG_OUT) {\n        state = undefined;\n        localStorage.clear();\n    };\n    return reducers(state, action);\n};\n\nexport const logoutActionCreator = () => ({\n    type: LOG_OUT,\n});\n\nlet store = createStore(appStore);\n\nwindow.store = store;\n\nexport default store;","let varsCss = {\n    mainTextColor: \"blue-text\",\n    mainColor: \"blue\",\n    navTextColor: \"blue-text text-darken-4\",\n    accentTextColor: \"orange-text text-darken-2\",\n    accentColor: \"orange darken-2\",\n    accentColorFill: \"#f57c00\",\n};\n\n\nexport default varsCss;","import React from 'react';\nimport classes from './AuthPage.module.css';\nimport cssVars from '../../vars_css/vars_css';\nimport M from \"materialize-css\";\nimport * as axios from 'axios';\nimport { registrationActionCreator, loginActionCreator } from '../../redux/authReducer';\n\n\nfunction AuthPage(props) {\n\n  let btnArr = document.querySelectorAll('button');\n  let inputArr = document.querySelectorAll('input');\n\n  let changeState = (e) => {\n    let email = document.querySelector('#email_inline').value;\n    let pass = document.querySelector('#password').value;\n    if (e.target.name === 'email') {\n      email = e.target.value;\n    };\n    if (e.target.name === 'password') {\n      pass = e.target.value;\n    };\n\n    let action = registrationActionCreator(email, pass);\n    props.dispatch(action);\n  };\n\n  let getAuthData = (token, id) => {\n    localStorage.setItem('userData', JSON.stringify({ token, id }));\n    let action = loginActionCreator(token, id);\n    props.dispatch(action);\n  };\n\n  let postAuthData = (e) => {\n\n    btnArr.forEach(btn => btn.disabled = true);\n    inputArr.forEach(input => input.disabled = true);\n\n    if (e.target.name === \"register\") {\n      axios({\n        method: 'post',\n        url: 'https://simple--messenger.herokuapp.com/api/auth/register',\n        data: props.authState\n      })\n        .then(response => {\n          M.toast({ html: `${response.data.message}` });\n          setTimeout(() => {\n            window.location.reload();\n          }, 1500)\n        })\n        .catch(function (error) {\n          error = JSON.parse(error.request.response);\n          M.toast({ html: `${error.message}` });\n          setTimeout(() => {\n            window.location.reload();\n          }, 1500)\n\n        });\n    };\n    if (e.target.name === \"login\") {\n      axios({\n        method: 'post',\n        url: 'https://simple--messenger.herokuapp.com/api/auth/login',\n        data: props.authState\n      })\n        .then(response => {\n          getAuthData(response.data.token, response.data.userId);\n        })\n        .catch(function (error) {\n          console.log(error.request);\n          error = JSON.parse(error.request.response);\n          M.toast({ html: `${error.message}`, completeCallback: function () { window.location.reload() } });\n        });\n    };\n  };\n\n  if (props.authState.email !== \"\" || props.authState.password !== \"\") {\n    return (\n      <div className={classes.body}>\n        <div className={classes.container}>\n          <h3 className={cssVars.mainTextColor}>Log In</h3>\n          <div className=\"input-field\">\n            <input type=\"email\" name=\"email\" id=\"email_inline\" onChange={changeState} className=\"validate\" />\n            <label htmlFor=\"email_inline\">Email</label>\n          </div>\n          <div className=\"input-field\">\n            <input id=\"password\" type=\"password\" className=\"validate\" name=\"password\" onChange={changeState} />\n            <label htmlFor=\"password\">Password</label>\n          </div>\n\n          <div className={classes.bntsSet}>\n            <button className={`${cssVars.mainColor} waves-effect waves-light btn`} name=\"login\" onClick={postAuthData}>Login</button>\n            <button className={`${cssVars.accentColor} waves-effect waves-light btn`} name=\"register\" onClick={postAuthData}>Registration</button>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className={classes.body}>\n        <div className={classes.container}>\n          <h3 className={cssVars.mainTextColor}>Log In</h3>\n          <div className=\"input-field\">\n            <input type=\"email\" name=\"email\" id=\"email_inline\" onChange={changeState} className=\"validate\" />\n            <label htmlFor=\"email_inline\">Email</label>\n          </div>\n          <div className=\"input-field\">\n            <input id=\"password\" type=\"password\" className=\"validate\" name=\"password\" onChange={changeState} />\n            <label htmlFor=\"password\">Password</label>\n          </div>\n\n          <div className={classes.bntsSet}>\n            <button className={`${cssVars.mainColor} waves-effect waves-light btn disabled`} name=\"login\" onClick={postAuthData}>Login</button>\n            <button className={`${cssVars.accentColor} waves-effect waves-light btn disabled`} name=\"register\" onClick={postAuthData}>Registration</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default AuthPage;\n","import { connect } from 'react-redux';\nimport AuthPage from './AuthPage';\n\n\nlet mapStateToProps = (state) => {\n  return {\n    authState: state.authPage,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    dispatch: (action) => {\n      dispatch(action);\n    },\n  };\n};\n\nconst AuthPageContainer = connect(mapStateToProps, mapDispatchToProps)(AuthPage);\n\n\nexport default AuthPageContainer;","import React from 'react';\nimport classes from './Navbar.module.css';\nimport { NavLink } from 'react-router-dom';\nimport cssVars from './../../../vars_css/vars_css';\nimport { contactCardActionCreator } from '../../../redux/contactsReducer';\n\n\nfunction Navbar(props) {\n\n    let dialogsCount = 0;\n    for (const dialog in props.navBar.newMessages) {\n        if (props.navBar.newMessages[dialog].messages.length > 0) {\n            dialogsCount++;\n        };\n    };\n    let isShow = \"noShowItem\";\n    if (dialogsCount > 0) isShow = \"showItem\";\n\n    return (\n        <nav className={cssVars.mainColor}>\n            <div className=\"nav-wrapper\">\n                <ul id=\"nav-mobile\" className={`${classes.body} center`}>\n                    <li><NavLink to='/profile'>Profile</NavLink></li>\n                    <li><NavLink to='/dialogs'>\n                        {`Dialogs`}\n                        <span\n                            style={{ color: \"#FFD073\", paddingLeft: \"5px\", }}\n                            className={`${isShow}`}\n                        >\n                            {dialogsCount}\n                        </span>\n                    </NavLink></li>\n                    <li><NavLink\n                        onClick={() => {\n                            let action = contactCardActionCreator(false);\n                            props.dispatch(action);\n                        }}\n                        to='/contacts'\n                    >Contacts</NavLink></li>\n                </ul>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar;","import { connect } from 'react-redux';\nimport Navbar from './Navbar';\n\n\nlet mapStateToProps = (state) => {\n    return {\n        navBar: state.navBar,\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar);\n\nexport default NavbarContainer;","import React from 'react';\nimport classes from './ProfileCard.module.css';\nimport cssVars from '../../../vars_css/vars_css';\nimport { changeUserDataActionCreator } from '../../../redux/profileReducer';\nimport { logoutActionCreator } from '../../../redux/reduxStore';\nimport { contactCardActionCreator } from '../../../redux/contactsReducer';\nimport { dialogIdActionCreator } from '../../../redux/dialogBodyReducer';\n\nfunction ProfileCard(props) {\n\n    function createBtns(arr) {\n        return arr.map(btn => {\n            if (btn.btnFunc === 'changeBtn') btn.btnFunc = changeBtn;\n            if (btn.btnFunc === 'logoutBtn') btn.btnFunc = logoutBtn;\n            if (btn.btnFunc === 'redirectToDialog') btn.btnFunc = redirectToDialog;\n            return btn = <button key={Math.random() * Math.random()} className={`${cssVars[btn.btnStyle]} waves-effect waves-light btn`} name=\"change\" onClick={btn.btnFunc} >{btn.btnName}</button>;\n        });\n    };\n\n    function changeBtn() {\n        let action = changeUserDataActionCreator(true);\n        props.dispatch(action);\n\n    };\n    function logoutBtn() {\n        let action = logoutActionCreator();\n        props.dispatch(action);\n\n    };\n    function redirectToDialog() {\n\n        let contactAction = contactCardActionCreator(false);\n        props.dispatch(contactAction);\n        let dialogAction = dialogIdActionCreator(props.profile.dialogId);\n        props.dispatch(dialogAction);\n    };\n\n    return (\n        <div className={classes.body}>\n            <div className={classes.userPhoto} style={{ backgroundImage: `url(${props.profile.userPhoto})` }} />\n            <p className={classes.discriptionText}>{props.profile.firstName}</p>\n            <p className={classes.discriptionText}>{props.profile.lastName}</p>\n            <p className={classes.discriptionText}>{props.profile.email}</p>\n            <p className={classes.discriptionText}>{props.profile.userSex}</p>\n            <p className={classes.discriptionText}>{props.profile.userBirthday}</p>\n            {createBtns(props.btns)}\n        </div>\n    );\n};\n\nexport default ProfileCard;","import React from 'react';\nimport classes from './ProfileCard.module.css';\nimport { Select, TextInput, DatePicker, Button } from 'react-materialize';\nimport { socket } from '../WorkPlace';\nimport { updateDataActionCreator, reloadActionCreator } from '../../../redux/profileReducer';\n\nfunction ChangeProfileCard(props) {\n\n    function changeInputs(e) {\n        let action;\n        if (e.target.name === 'sex') {\n            action = updateDataActionCreator(e.target.name, e.target.selectedOptions[0].value, true);\n        } else {\n            action = updateDataActionCreator(e.target.name, e.target.value, true);\n        };\n\n        props.dispatch(action);\n\n    };\n\n    return (\n        <div className={classes.body}>\n            {/* <div className={classes.userPhoto} style={{ backgroundImage: `url(${props.profilePage.photo})` }} /> */}\n            <TextInput\n                id='profileNameInput'\n                label='First Name'\n                name='firstName'\n                value={props.profilePage.firstName}\n                onChange={(e) => { changeInputs(e) }}\n            />\n            <TextInput\n                id='profileLastNameInput'\n                label='Last Name'\n                name='lastName'\n                email={true}\n                value={props.profilePage.lastName}\n                onChange={(e) => { changeInputs(e) }}\n            />\n            <TextInput\n                id='profileEmailInput'\n                label='Email'\n                name='email'\n                value={props.profilePage.email}\n                onChange={(e) => { changeInputs(e) }}\n            />\n            <Select\n                id=\"profileSelect\"\n                label=\"Sex\"\n                name='userSex'\n                multiple={false}\n                onChange={(e) => { changeInputs(e) }}\n                defaultValue={props.profilePage.userSex}\n            >\n                <option disabled={true} value=\"\">Check your sex</option>\n                <option value=\"man\">man</option>\n                <option value=\"woman\">woman</option>\n            </Select>\n            <DatePicker\n                id=\"profileDatePicker\"\n                value={props.profilePage.userBirthday}\n                readOnly={true}\n                label='Birthday'\n                name='userBirthday'\n                onChange={() => {\n                    let d = document.querySelector('td.is-selected button');\n                    let m = d.dataset.month;\n                    m = Number(m) + 1;\n                    if (m < 10) m = '0' + m;\n                    let day = d.dataset.day;\n                    if (day < 10) day = '0' + Number(day);\n                    let newDate = `${d.dataset.year}-${m}-${day}`;\n                    let e = { target: {} };\n                    e.target.name = 'userBirthday';\n                    e.target.value = newDate;\n                    changeInputs(e);\n                }}\n                options={{\n                    format: 'yyyy-mm-dd',\n                    yearRange: 99,\n                }}\n            />\n            <Button\n                id='saveBtn'\n                className='blue'\n                disabled={!props.profilePage.changed}\n                onClick={() => {\n                    let changedData = {\n                        id: props.profilePage.id,\n                        firstName: props.profilePage.firstName,\n                        lastName: props.profilePage.lastName,\n                        email: props.profilePage.email,\n                        userBirthday: props.profilePage.userBirthday,\n                        userSex: props.profilePage.userSex,\n                        changed: true\n                    };\n                    socket.emit('profileData', changedData);\n                    let action = reloadActionCreator(null);\n                    props.dispatch(action);\n                }}\n            >Save</Button>\n        </div>\n    );\n};\n\nexport default ChangeProfileCard;","import React from 'react';\nimport classes from './ProfilePage.module.css';\nimport { socket } from './../../WorkPlace';\nimport { getUserDataActionCreator, changeUserDataActionCreator } from './../../../../redux/profileReducer';\nimport { Button, Icon, Preloader } from 'react-materialize';\nimport ProfileCard from '../../Units/ProfileCard';\nimport ChangeProfileCard from '../../Units/ChangeProfileCard';\n\nfunction ProfilePage(props) {\n\n    let userId = JSON.parse(localStorage.getItem('userData')).id;\n    let data = { id: userId }\n\n    socket.on(`${userId}Profile`, async userData => {\n\n        let action = getUserDataActionCreator(userData);\n        props.dispatch(action);\n\n    });\n\n    if (props.profilePage.id === null) {\n        socket.emit('profileData', data);\n        return (\n            <div className={classes.body}>\n                <Preloader />\n\n            </div>\n        );\n    };\n    if (props.profilePage.changePage === true) {\n\n        return (\n            <div className={classes.body}>\n                <Button\n                    className={`${classes.closeBtn} grey`}\n                    floating\n                    icon={<Icon>close</Icon>}\n                    small\n                    waves='light'\n                    onClick={() => {\n                        let action = changeUserDataActionCreator(false);\n                        props.dispatch(action);\n                    }}\n                />\n                <ChangeProfileCard profilePage={props.profilePage} dispatch={props.dispatch} />\n            </div>\n        );\n    };\n\n    return (\n        <div className={classes.body}>\n            <ProfileCard\n                btns={[\n                    {\n                        btnFunc: 'changeBtn',\n                        btnStyle: 'mainColor',\n                        btnName: 'Change',\n\n                    },\n                    {\n                        btnFunc: 'logoutBtn',\n                        btnStyle: 'accentColor',\n                        btnName: 'Logout',\n\n                    },\n                ]}\n                profile={props.profilePage}\n                dispatch={props.dispatch}\n            />\n        </div>\n    );\n};\n\nexport default ProfilePage;","import { connect } from 'react-redux';\nimport ProfilePage from './ProfilePage';\n\n\nlet mapStateToProps = (state) => {\n    return {\n        profilePage: state.profilePage,\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst ProfilePageContainer = connect(mapStateToProps, mapDispatchToProps)(ProfilePage);\n\nexport default ProfilePageContainer;","import React from 'react';\nimport classes from './DialogsItem.module.css';\nimport varsCss from '../../../../../vars_css/vars_css';\n\nfunction DialogsItem(props) {\n\n  let isShow = \"noShowItem\";\n  if (props.data.newMsgs && props.data.newMsgs > 0) isShow = \"showItem\";\n\n  return (\n    <div className={classes.body}>\n      <div className={classes.userInfo}>\n        <div className={classes.userPhoto} style={{ backgroundImage: `url(${props.data.photo})` }} />\n        <div className={`${classes.user_name} ${varsCss.navTextColor}`}>{props.data.name}</div>\n        <div className={`${classes.user_name} ${varsCss.navTextColor}`}>{props.data.lastName}</div>\n      </div>\n      <div className={classes.newMsgsContainer}>\n        <div className={`${isShow} ${classes.newMsgs} ${varsCss.accentTextColor}`}>{props.data.newMsgs}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default DialogsItem;\n","import React from 'react';\n\nfunction IconAdd(props) {\n    return (\n        <svg className=\"icon-add\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" id=\"layer_1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 150 150\" enableBackground=\"new 0 0 150 150\" xmlSpace=\"preserve\" width={props.width} fill={props.fill}>\n            <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M112.5,72.5h-35v-35c0-1.4-1.1-2.5-2.5-2.5l0,0c-1.4,0-2.5,1.1-2.5,2.5v35h-35c-1.4,0-2.5,1.1-2.5,2.5l0,0  c0,1.4,1.1,2.5,2.5,2.5h35v35c0,1.4,1.1,2.5,2.5,2.5l0,0c1.4,0,2.5-1.1,2.5-2.5v-35h35c1.4,0,2.5-1.1,2.5-2.5l0,0  C115,73.6,113.9,72.5,112.5,72.5z\" />\n            <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M75.8,141.8c-37.5,0-68-30.5-68-68s30.5-68,68-68s68,30.5,68,68S113.3,141.8,75.8,141.8z M75.8,10.8c-34.7,0-63,28.3-63,63  s28.3,63,63,63s63-28.3,63-63S110.6,10.8,75.8,10.8z\" />\n        </svg>\n    );\n}\n\nexport default IconAdd;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { socket } from '../../../WorkPlace';\nimport { uploadDialogsActionCreator } from '../../../../../redux/dialogsListReducer';\nimport { dialogIdActionCreator } from '../../../../../redux/dialogBodyReducer';\nimport DialogsItem from './DialogsItem';\nimport classes from './DialogsList.module.css';\nimport IconAdd from '../../../../../img/icons/IconAdd';\nimport varsCss from '../../../../../vars_css/vars_css';\nimport { Preloader } from 'react-materialize';\n\n\nlet createDialogs = (dialogs, dialogId, dispatch) => {\n\n    if (dialogs !== undefined) {\n        if (dialogId !== '') {\n\n            let lastMsgs = [];\n            dialogs.forEach(d => {\n                if (d.lastMsg) lastMsgs.push(d.lastMsg);\n            });\n            lastMsgs.sort((a, b) => a - b);\n            lastMsgs.forEach(i => {\n                dialogs.find(function (dialog, index, arr) {\n                    if (dialog.lastMsg === i) {\n                        arr.splice(index, 1);\n                        arr.unshift(dialog);\n                    };\n                    return this;\n                });\n            });\n        };\n        let dialogsItems = dialogs.map(dialog => {\n            return (\n                <NavLink\n                    exact to={`/dialogs/dialog/${dialog.dialogId}`}\n                    key={dialog.dialogId}\n                    onClick={() => {\n                        let action = dialogIdActionCreator(dialog.dialogId);\n                        dispatch(action);\n                    }}>\n                    <DialogsItem data={dialog} />\n                </NavLink>\n            );\n        });\n        return dialogsItems;\n    };\n};\n\n\nfunction DialogsList(props) {\n\n    if (!props.dialogsList.isLoad) {\n\n        socket.emit('dialogList', JSON.parse(localStorage.getItem('userData')).id);\n\n        let userId = JSON.parse(localStorage.getItem('userData')).id;\n        let dialogs = 0;\n        if (props.dialogsList.dialogs !== undefined) {\n            dialogs = props.dialogsList.dialogs.length;\n        };\n        socket.emit('updateDialogsList', userId, dialogs);\n        socket.on(`updateDialogsList${userId}`, data => {\n            let action = uploadDialogsActionCreator(true, data);\n            props.dispatch(action);\n        });\n\n        return (\n            <div className={classes.preloaderContainer}>\n                <Preloader />\n            </div>\n        );\n    };\n    if (props.dialogsList.dialogs.length === 0) {\n        return (\n            <div className={classes.preloaderContainer}>\n                <h5>no dialogs</h5>\n                <NavLink exact to={`/dialogs/add_new_user`}><IconAdd width=\"50px\" fill={varsCss.accentColorFill} /></NavLink>\n            </div>\n        );\n    };\n    let dialogId = '';\n    if (props.dialogsList.upDialog) dialogId = props.dialogsList.upDialog;\n    return (\n        <div className={classes.body}>\n            <div className={classes.content}>\n                {/* <Route exact path={`/dialogs`} render={() => createDialogs(props.dialogsList.dialogs, dialogId, props.dispatch)} /> */}\n                {createDialogs(props.dialogsList.dialogs, dialogId, props.dispatch)}\n            </div>\n            <NavLink exact to={`/dialogs/add_new_user`}><IconAdd width=\"50px\" fill={varsCss.accentColorFill} /></NavLink>\n        </div >\n    );\n};\n\nexport default DialogsList;","import { connect } from 'react-redux';\nimport DialogsList from './DialogsList';\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsList: state.dialogsList,\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst DialogsListContainer = connect(mapStateToProps, mapDispatchToProps)(DialogsList);\n\nexport default DialogsListContainer;","import React from 'react';\nimport classes from './SearchNewUser.module.css';\nimport varsCss from '../../../../../vars_css/vars_css';\nimport { Button, Card, CardTitle, Preloader, TextInput } from 'react-materialize';\nimport { getNewUserActionCreator, redirectNewUserActionCreator, updateEmailActionCreator } from '../../../../../redux/searchNewUserReducer';\nimport { socket } from '../../../WorkPlace';\nimport { Redirect } from 'react-router-dom';\nimport { dialogIdActionCreator } from '../../../../../redux/dialogBodyReducer';\n\nlet changeInputs = function (dispatch, value, changed, isLoad) {\n  let action = updateEmailActionCreator(value, changed, isLoad);\n  dispatch(action);\n};\n\nclass SearchNewUser extends React.Component {\n\n  render() {\n\n    if (this.props.searchNewUser.redirect) {\n      let action = dialogIdActionCreator(this.props.searchNewUser.redirect);\n      this.props.dispatch(action);\n      return <Redirect to={`/dialogs/dialog/${this.props.searchNewUser.redirect}`} />\n    };\n\n    let showItem = (data) => {\n      if (data === '') {\n        return (\n          <div className='noShowItem'>{data}</div>\n        );\n      } else {\n        return (\n          <div className='displayBlock'>{data}</div>\n        );\n      };\n    };\n\n    let buttonFnc = (isContact) => {\n      if (isContact) {\n        return (\n          <Button\n            small\n            key=\"goToDialog\"\n            style={{ marginTop: 0, marginLeft: '30px' }}\n            className={varsCss.accentColor}\n            onClick={() => {\n              let action = redirectNewUserActionCreator(this.props.searchNewUser.newContact.dialogId);\n              this.props.dispatch(action);\n            }}\n          >Go to dialog</Button>\n        );\n      };\n      return (\n        <Button\n          small\n          key=\"save\"\n          style={{ marginTop: 0, marginLeft: '30px' }}\n          className={varsCss.accentColor}\n          onClick={() => {\n            socket.emit('addNewContact', {\n              userId: JSON.parse(localStorage.getItem('userData')).id,\n              newContactId: this.props.searchNewUser.newContact.id\n            });\n            changeInputs(this.props.dispatch, '', false, 'loading');\n          }}\n        >Save</Button>\n      );\n    };\n\n    let searchResult;\n\n    let visibleClass = 'noShowItem';\n    let disabledInput = false;\n    if (this.props.searchNewUser.isLoad === 'loading') {\n      visibleClass = 'displayBlock';\n      disabledInput = true;\n      searchResult = <Preloader />;\n    };\n    if (this.props.searchNewUser.isLoad === true && this.props.searchNewUser.newContact.email === '') {\n      visibleClass = 'displayBlock';\n      searchResult = <Card\n        actions={[\n          <Button\n            small\n            key=\"close\"\n            style={{ marginTop: 0 }}\n            className={varsCss.mainColor}\n            onClick={() => changeInputs(this.props.dispatch, '', false, false)}>Close</Button>\n        ]}\n      >\n        User is not found\n    </Card>;\n    };\n    if (this.props.searchNewUser.isLoad && this.props.searchNewUser.newContact.email !== '') {\n      visibleClass = 'displayBlock';\n      searchResult = <Card\n        style={{\n          maxWidth: '300px',\n        }}\n        actions={[\n          <Button\n            small\n            key=\"close\"\n            style={{ marginTop: 0 }}\n            className={varsCss.mainColor}\n            onClick={() => changeInputs(this.props.dispatch, '', false, false)}\n          >Close</Button>,\n          buttonFnc(this.props.searchNewUser.newContact.isContact),\n        ]}\n        header={<CardTitle style={{ width: '100%' }} image={this.props.searchNewUser.newContact.userPhoto} />}\n      >\n        {showItem(this.props.searchNewUser.newContact.firstName)}\n        {showItem(this.props.searchNewUser.newContact.lastName)}\n        {this.props.searchNewUser.newContact.email}\n      </Card>;\n    };\n\n    return (\n      <div className={classes.body}>\n        <div className={classes.container}>\n          <h5 className={varsCss.navTextColor} style={{ marginBottom: \"30px\" }}>To search for a user enter his (her) e-mail</h5>\n          <TextInput\n            id='searchNewUserEmailInput'\n            label='Email'\n            name='email'\n            value={this.props.searchNewUser.newContact.email}\n            disabled={disabledInput}\n            onChange={(e) => {\n              let changed = true;\n              if (e.target.value === '') changed = false;\n              changeInputs(this.props.dispatch, e.target.value, changed, false);\n            }}\n          />\n          <Button\n            id='searchBtn'\n            className='blue'\n            disabled={!this.props.searchNewUser.changed}\n            onClick={() => {\n              socket.emit('findUser', { userId: JSON.parse(localStorage.getItem('userData')).id, contactEmail: this.props.searchNewUser.newContact.email });\n              changeInputs(this.props.dispatch, '', false);\n              let action = getNewUserActionCreator({ email: '' }, false, 'loading');\n              this.props.dispatch(action);\n            }}\n          >Search</Button>\n          <div className={`${classes.searchResult} ${visibleClass}`}>\n            {searchResult}\n          </div>\n        </div>\n      </div>\n    );\n\n  };\n\n  componentWillUnmount() {\n    let action = redirectNewUserActionCreator(false);\n    this.props.dispatch(action);\n  };\n};\n\nexport default SearchNewUser;\n","import { connect } from 'react-redux';\nimport SearchNewUser from './SearchNewUser';\n\n\nlet mapStateToProps = (state) => {\n    return {\n        searchNewUser: state.searchNewUser,\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst SearchNewUserContainer = connect(mapStateToProps, mapDispatchToProps)(SearchNewUser);\n\nexport default SearchNewUserContainer;","import React from 'react';\nimport { getNewUserActionCreator } from '../../../../../redux/searchNewUserReducer';\nimport { socket } from '../../../WorkPlace';\nimport SearchNewUserContainer from './SearchNewUserContainer';\n\nfunction ContainerForSearchNewUser(props) {\n\n  socket.on('newContact', data => {\n    let action = getNewUserActionCreator(data, false, true);\n    props.dispatch(action);\n  });\n\n  return <SearchNewUserContainer />;\n}\n\nexport default ContainerForSearchNewUser;\n","import React from 'react';\nimport classes from './MessageItem.module.css';\nimport varsCss from '../../../../../vars_css/vars_css';\n\nfunction MessageItem(props) {\n\n    let userName;\n    if (props.user.firstName !== '') {\n        userName = props.user.firstName;\n    } else {\n        userName = props.user.email;\n    };\n\n    let senderClass;\n\n    if (props.user.id === JSON.parse(localStorage.getItem('userData')).id) {\n        senderClass = classes.fromUser;\n        userName = 'You';\n    };\n    if (props.user.id !== JSON.parse(localStorage.getItem('userData')).id) senderClass = classes.fromInterlocutor;\n    if (props.description === 'system_message') senderClass = classes.fromSystem;\n\n    return (\n        <div className={`${classes.body} ${senderClass}`}>\n            <div className={`${classes.sender} ${varsCss.navTextColor}`}>{userName}</div>\n            <div className={classes.messageBody}>{props.messageBody}</div>\n        </div>\n    );\n};\n\nexport default MessageItem;","import React from 'react';\nimport classes from './DialogBody.module.css';\nimport { socket } from '../../../WorkPlace';\nimport MessageItem from './MessageItem';\nimport { dialogIdActionCreator, dialogs } from '../../../../../redux/dialogBodyReducer';\nimport { Preloader } from 'react-materialize';\n\nfunction createMessageList(data) {\n\n    if (data.isLoad) {\n        let messages = [];\n        data.dialog.messages.map(message => {\n            if (message.to === data.dialog.user1.id) {\n                return messages.push(<MessageItem key={Math.random()} to={message.to} messageBody={message.messageBody} user={data.dialog.user2} creation={message.creation} description={message.description} />);\n            };\n            return messages.push(<MessageItem key={Math.random()} to={message.to} messageBody={message.messageBody} user={data.dialog.user1} creation={message.creation} description={message.description} />);\n        });\n        return messages;\n    };\n};\n\nclass DialogBody extends React.Component {\n\n    render() {\n\n        if (!this.props.dialogPage.isLoad) {\n            socket.emit('uploadDialog', { dialogId: this.props.dialogPage.dialogId, getDialog: true });\n\n            return (\n                <div className={classes.preloaderContainer}>\n                    <Preloader />\n                </div>\n            );\n        };\n\n        let userId = JSON.parse(localStorage.getItem('userData')).id;\n        let newDeliveredMessagesIdArr = [];\n\n        if (this.props.dialogPage.dialog.messages.length > 0) {\n            this.props.dialogPage.dialog.messages.map(message => {\n                if (message.to === userId && !message.delivered) {\n                    newDeliveredMessagesIdArr.push(message._id);\n                };\n                return message;\n            });\n        };\n\n        if (newDeliveredMessagesIdArr.length > 0) {\n            socket.emit('uploadDialog', {\n                dialogId: this.props.dialogPage.dialogId,\n                userId: userId,\n                newDeliveredMessagesIdArr\n            });\n        };\n\n        return (\n            <div className={classes.body} id='dialogArea'>\n                <div\n                    className={classes.content}\n                    onScroll={(e) => { console.log(e) }}\n                >\n                    {createMessageList(this.props.dialogPage)}\n                </div>\n            </div>\n        );\n    };\n\n    componentDidMount() {\n        if (this.props.dialogPage.isLoad && this.props.dialogPage.dialog.messages && this.props.dialogPage.dialog.messages.length > 0) {\n            let scrollMessages = document.querySelector('#dialogArea');\n            scrollMessages.scrollTop = scrollMessages.scrollHeight;\n        };\n    };\n\n    componentDidUpdate() {\n        let scrollMessages = document.querySelector('#dialogArea');\n        scrollMessages.scrollTop = scrollMessages.scrollHeight;\n    };\n\n    componentWillUnmount() {\n        dialogs.currentDialog = null;\n        let action = dialogIdActionCreator('');\n        this.props.dispatch(action);\n    };\n};\n\n\nexport default DialogBody;","import { connect } from 'react-redux';\nimport DialogBody from './DialogBody';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogPage: state.dialogPage,\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst DialogBodyContainer = connect(mapStateToProps, mapDispatchToProps)(DialogBody);\n\nexport default DialogBodyContainer;","import React from 'react';\nimport classes from './TextArea.module.css';\nimport { Textarea, Button, Icon } from 'react-materialize';\nimport varsCss from '../../../../../vars_css/vars_css';\nimport { changeNewMessageActionCreator } from '../../../../../redux/textAreaReducer';\nimport { socket } from '../../../WorkPlace';\n\n\nfunction TextArea(props) {\n\n    let user = JSON.parse(localStorage.getItem('userData')).id;\n    let interlocutor;\n\n    if (props.dialog && props.dialog.user1) {\n        if (props.dialog.user1.id !== user) {\n            interlocutor = props.dialog.user1.id\n        } else {\n            interlocutor = props.dialog.user2.id\n        };\n    };\n\n    let sendBtn = true;\n    if (props.textArea.newMessage !== '') sendBtn = false;\n\n    return (\n        <div className={`${classes.body} ${varsCss.mainColor}`}>\n            <Textarea\n                className={`white`}\n                value={props.textArea.newMessage}\n                onChange={(e) => {\n                    let action = changeNewMessageActionCreator(e.target.value);\n                    props.dispatch(action);\n                }}\n            />\n            <Button\n                className={varsCss.accentColor}\n                node=\"button\"\n                type=\"submit\"\n                waves=\"light\"\n                disabled={sendBtn}\n                onClick={() => {\n                    socket.emit('uploadDialog', {\n                        dialogId: props.dialog.dialogId,\n                        user,\n                        interlocutor,\n                        messageBody: props.textArea.newMessage,\n                        creation: Date.now(),\n                    });\n                    let action = changeNewMessageActionCreator('');\n                    props.dispatch(action);\n                }}\n            ><Icon>send</Icon>\n            </Button>\n        </div >\n    );\n};\n\nexport default TextArea;","import { connect } from 'react-redux';\nimport TextArea from './TextArea';\n\n\nlet mapStateToProps = (state) => {\n    return {\n        textArea: state.textArea,\n        dialog: state.dialogPage.dialog\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst TextAreaContainer = connect(mapStateToProps, mapDispatchToProps)(TextArea);\n\nexport default TextAreaContainer;","import React from 'react';\nimport classes from './Dialog.module.css';\nimport DialogBodyContainer from './DialogBodyContainer';\nimport TextAreaContainer from './TextAreaContainer';\n\nfunction Dialog() {\n    return (\n        <div className={classes.body}>\n            <TextAreaContainer />\n            <DialogBodyContainer />\n        </div>\n    );\n};\n\nexport default Dialog;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport classes from './DialogsPage.module.css';\nimport DialogsListContainer from './DialogsList/DialogsListContainer';\nimport ContainerForSearchNewUser from './DialogsList/ContainerForSearchNewUser';\nimport Dialog from './Dialog/Dialog';\n\nfunction DialogsPage(props) {\n    return (\n        <div className={classes.body}>\n            <Route exact path='/dialogs' render={() => <DialogsListContainer />} />\n            <Route path='/dialogs/dialog' render={() => <Dialog />} />\n            <Route path='/dialogs/add_new_user' render={() => <ContainerForSearchNewUser dispatch={props.dispatch} />} />\n        </div>\n    );\n};\n\nexport default DialogsPage;","import React from 'react';\nimport varsCss from '../../../../vars_css/vars_css';\nimport classes from './ContactItem.module.css';\n\nfunction ContactItem(props) {\n\n  let isShow = \"noShowItem\";\n  let userFirstName;\n  let userLastName;\n\n  if (props.data.firstName === '') {\n    userFirstName = props.data.email;\n    userLastName = '';\n  } else {\n    userFirstName = props.data.firstName;\n    userLastName = props.data.lastName;\n  };\n\n  return (\n    <div className={classes.body}>\n      <div className={classes.userInfo}>\n        <div className={classes.userPhoto} style={{ backgroundImage: `url(${props.data.userPhoto})` }} />\n        <div className={`${classes.user_name} ${varsCss.navTextColor}`}>{userFirstName}</div>\n        <div className={`${classes.user_name} ${varsCss.navTextColor}`}>{userLastName}</div>\n      </div>\n      <div className={classes.newMsgsContainer}>\n        <div className={`${isShow} ${classes.newMsgs} ${varsCss.accentTextColor}`}>{props.data.newMsgs}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default ContactItem;\n","import React from 'react';\nimport { Preloader } from 'react-materialize';\nimport classes from './ContactsList.module.css';\nimport { socket } from '../../WorkPlace';\nimport ContactItem from './ContactItem';\nimport { NavLink } from 'react-router-dom';\nimport { contactCardActionCreator } from '../../../../redux/contactsReducer';\nimport ProfileCard from '../../Units/ProfileCard';\n\n\nlet createContacstList = (contactsArr, dispatch) => {\n\n    // start sort contacts\n    let emailsArr = [];\n    let namesArr = [];\n\n    contactsArr.forEach(contact => {\n        if (contact.firstName !== '') {\n            namesArr.push(contact.firstName);\n        } else {\n            emailsArr.push(contact.email);\n        };\n    });\n\n    emailsArr.sort();\n    namesArr.sort();\n\n    let emailsContactArr = emailsArr.map(contact => {\n        contactsArr.forEach(item => {\n            if (item.email === contact) contact = item;\n        });\n        return contact;\n    });\n    let namesContactArr = namesArr.map(contact => {\n        contactsArr.forEach(item => {\n            if (item.firstName === contact) contact = item;\n        });\n        return contact;\n    });\n\n    let sortContactsArr = [].concat(emailsContactArr, namesContactArr);\n    // end sort contacts\n\n    let contacts = sortContactsArr.map(contact => {\n        return (\n            <NavLink\n                exact to={`/contacts/contact/${contact.id}`}\n                key={contact.id}\n                onClick={() => {\n                    let action = contactCardActionCreator(contact);\n                    dispatch(action);\n                }}>\n                <ContactItem data={contact} />\n            </NavLink>\n        );\n    });\n    return contacts;\n};\n\nfunction ContactsList(props) {\n\n    if (!props.contactsPage.isLoad) {\n        socket.emit('uploadContacts', { userId: JSON.parse(localStorage.getItem('userData')).id });\n        return (\n            <div className={classes.preloaderContainer}>\n                <Preloader />\n            </div>\n        );\n    };\n\n    if (props.contactsPage.contacts.length === 0) {\n        return (\n            <div className={classes.preloaderContainer}>\n                <h5>no contacts</h5>\n            </div>\n        );\n    };\n\n    if (props.contactsPage.contactCard) {\n        return (\n            <div className={classes.preloaderContainer}>\n                <ProfileCard\n                    btns={[\n                        {\n                            btnFunc: 'redirectToDialog',\n                            btnStyle: 'accentColor',\n                            btnName: 'Go to dialog',\n\n                        },\n                    ]}\n                    profile={props.contactsPage.contactCard}\n                    dispatch={props.dispatch}\n                />\n            </div>\n        );\n    };\n\n    return (\n        <div className={classes.body}>\n            <div className={classes.content}>\n                {createContacstList(props.contactsPage.contacts, props.dispatch)}\n            </div>\n        </div>\n    );\n};\n\nexport default ContactsList;","import { connect } from 'react-redux';\nimport ContactsList from './ContactsList';\n\n\nlet mapStateToProps = (state) => {\n    return {\n        contactsPage: state.contactsPage,\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst ContactsListContainer = connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n\nexport default ContactsListContainer;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { getContactsActionCreator } from '../../../../redux/contactsReducer';\nimport { socket } from '../../WorkPlace';\nimport ContactsListContainer from './ContactsListContainer';\nimport classes from './ContactsPage.module.css';\n\nfunction ContactsPage(props) {\n\n    socket.on('uploadContacts', data => {\n        let action = getContactsActionCreator(data.contactsArr);\n        props.dispatch(action);\n    });\n\n    return (\n        <div className={classes.body}>\n            <Route path='/contacts' render={() => <ContactsListContainer />} />\n        </div>);\n};\n\nexport default ContactsPage;","import React from 'react';\nimport classes from './AppPages.module.css';\nimport { Route } from 'react-router-dom';\nimport ProfilePageContainer from './ProfilePage/ProfilePageContainer';\nimport DialogsPage from './DialogsPage/DialogsPage';\nimport ContactsPage from './ContactsPage/ContactsPage';\nimport { Redirect } from 'react-router-dom';\nimport { socket } from '../WorkPlace';\n\n\nfunction AppPages(props) {\n\n\tconst userId = JSON.parse(localStorage.getItem('userData')).id;\n\tsocket.emit('isOnline', { userId: userId, isDialogsLoad: props.isDialogsLoad });\n\n\tlet redirectFnc = function (redirect) {\n\t\tif (redirect !== '' && redirect !== undefined) {\n\t\t\treturn <Redirect to={`/dialogs/dialog/${redirect}`} />;\n\t\t};\n\t\treturn null;\n\t};\n\n\treturn (\n\t\t<div className={classes.body}>\n\t\t\t<Route path='/profile' render={() => <ProfilePageContainer />} />\n\t\t\t<Route path='/dialogs' render={() => <DialogsPage dispatch={props.dispatch} />} />\n\t\t\t<Route path='/contacts' render={() => <ContactsPage dispatch={props.dispatch} />} />\n\t\t\t{redirectFnc(props.dialogId)}\n\t\t</div>\n\t);\n};\n\nexport default AppPages;","import { connect } from 'react-redux';\nimport AppPages from './AppPages';\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogId: state.dialogPage.dialogId,\n        isDialogsLoad: state.dialogsList.isLoad,\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst AppPagesContainer = connect(mapStateToProps, mapDispatchToProps)(AppPages);\n\nexport default AppPagesContainer;","import React from 'react';\nimport classes from './WorkPlace.module.css';\nimport NavbarContainer from './Navbar/NavbarContainer';\nimport AppPagesContainer from './AppPages/AppPagesContainer';\nimport io from 'socket.io-client';\nimport { dialogs, uploadDialogActionCreator } from '../../redux/dialogBodyReducer';\nimport { newMessagesActionCreator } from '../../redux/navigationReducer';\nimport { checkNewMessagesOnDialogListActionCreator, reloadDialogsActionCreator } from '../../redux/dialogsListReducer';\nimport { reloadContactsActionCreator } from '../../redux/contactsReducer';\nimport { redirectNewUserActionCreator } from '../../redux/searchNewUserReducer';\n\nexport let socket = io.connect('https://simple--messenger.herokuapp.com/');\n\n\nfunction WorkPlace(props) {\n\n  const userId = JSON.parse(localStorage.getItem('userData')).id;\n\n  socket.on('getDialog', data => {\n\n    let action = uploadDialogActionCreator(data);\n    props.dispatch(action);\n  });\n\n  socket.on(`newMessageTo${userId}`, data => {\n\n    let action = uploadDialogActionCreator(data);\n    props.dispatch(action);\n\n    let newMsgs = [];\n    if (data.dialogId !== dialogs.currentDialog) {\n      data.messages.map(m => {\n        if (!m.delivered && m.to === userId) {\n          newMsgs.push(m);\n        };\n        return m;\n      });\n    };\n    let newMsgsData = {\n      dialogId: data.dialogId,\n      messages: newMsgs,\n      lastMsg: data.messages[(data.messages.length - 1)].creation,\n    };\n\n    let action1 = newMessagesActionCreator(newMsgsData);\n    props.dispatch(action1);\n    let action2 = checkNewMessagesOnDialogListActionCreator(newMsgsData.dialogId, newMsgsData.messages, newMsgsData.lastMsg);\n    props.dispatch(action2);\n  });\n\n\n  socket.on(`addNewContact${userId}`, data => {\n\n    let actionContacts = reloadContactsActionCreator();\n    props.dispatch(actionContacts);\n\n    socket.emit('updateDialogsList', JSON.parse(localStorage.getItem('userData')).id);\n\n    if (data.initiator === userId) {\n      let actionSearchNewUser = redirectNewUserActionCreator(data.newContact.dialogId);\n      props.dispatch(actionSearchNewUser);\n    };\n\n    if (data.initiator !== userId) {\n      // socket.emit('uploadDialog', { dialogId: data.newContact.dialogId, contactId: userId });\n      let action = reloadDialogsActionCreator('reload');\n      props.dispatch(action);\n    };\n  });\n\n\n\n  return (\n    <div className={classes.body}>\n      <NavbarContainer />\n      <AppPagesContainer />\n    </div>\n  );\n};\n\nexport default WorkPlace;\n","import { connect } from 'react-redux';\nimport WorkPlace from './WorkPlace';\n\n\nlet mapStateToProps = (state) => {\n    return {\n        // dialogId: state.dialogPage.dialogId,\n    };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        dispatch: (action) => {\n            dispatch(action);\n        },\n    };\n};\n\nconst WorkPlaceContainer = connect(mapStateToProps, mapDispatchToProps)(WorkPlace);\n\nexport default WorkPlaceContainer;","import React from 'react';\nimport './App.css';\nimport { useRoutes } from './routes';\nimport { loginActionCreator } from './redux/authReducer';\n\nfunction App(props) {\n\n  let isAuthenticated = !!props.authState.token;\n\n  if ((localStorage.userData !== undefined) && (isAuthenticated === false)) {\n    let data = JSON.parse(localStorage.userData);\n    let action = loginActionCreator(data.token, data.id);\n    props.dispatch(action);\n  };\n\n\n  const routes = useRoutes(isAuthenticated);\n  return (\n    <div className=\"App\">\n      {routes}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport AuthPageContainer from './ContainerApp/AuthPage/AuthPageContainer';\nimport WorkPlaceContainer from './ContainerApp/WorkPlace/WorkPlaceContainer';\n\n\nexport const useRoutes = (isAuthenticated) => {\n    if (isAuthenticated) {\n        return (\n            <Switch>\n                <Route path='/profile' render={() => <WorkPlaceContainer />} />\n                <Route path='/dialogs' render={() => <WorkPlaceContainer />} />\n                <Route path='/contacts' render={() => <WorkPlaceContainer />} />\n                <Redirect to='/dialogs' />\n            </Switch>\n        );\n    };\n    return (\n        <Switch>\n            <Route exact path='/' render={() => <AuthPageContainer />} />\n            <Redirect to='/' />\n        </Switch>\n    );\n};","import { connect } from 'react-redux';\nimport App from './App';\n\n\nlet mapStateToProps = (state) => {\n  return {\n    authState: state.authPage,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    dispatch: (action) => {\n      dispatch(action);\n    },\n  };\n};\n\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default AppContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/reduxStore.js';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport AppContainer from './AppContainer';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"AuthPage_body__UKA5d\",\"container\":\"AuthPage_container__1ErkF\",\"bntsSet\":\"AuthPage_bntsSet__2qiu5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"MessageItem_body__2DKle\",\"sender\":\"MessageItem_sender__3lgnW\",\"fromUser\":\"MessageItem_fromUser__3uPRb\",\"fromInterlocutor\":\"MessageItem_fromInterlocutor__1O6cK\",\"messageBody\":\"MessageItem_messageBody__1vPRc\",\"fromSystem\":\"MessageItem_fromSystem__3QYG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ContactsList_body__ji0bU\",\"content\":\"ContactsList_content__2otnV\",\"preloaderContainer\":\"ContactsList_preloaderContainer__wJLwh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ProfilePage_body__pUQNv\",\"closeBtn\":\"ProfilePage_closeBtn__X-Ux8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"DialogsList_body__o4bAz\",\"content\":\"DialogsList_content__UFbrw\",\"preloaderContainer\":\"DialogsList_preloaderContainer__1KmdS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"SearchNewUser_body__3qZak\",\"container\":\"SearchNewUser_container__3YEpz\",\"searchResult\":\"SearchNewUser_searchResult__2vN1J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"DialogBody_body__1ISCj\",\"content\":\"DialogBody_content__2JXWN\",\"preloaderContainer\":\"DialogBody_preloaderContainer__Qi1LQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"WorkPlace_body__2tSNu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Navbar_body__czvJ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"AppPages_body__2zqND\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"DialogsPage_body__1Btte\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Dialog_body__1o6qv\",\"preloaderContainer\":\"Dialog_preloaderContainer__3ej52\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"TextArea_body__Se-37\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ContactsPage_body__370XY\"};"],"sourceRoot":""}