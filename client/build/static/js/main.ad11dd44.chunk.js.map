{"version":3,"sources":["ContainerApp/WorkPlace/Units/ProfileCard.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsItem.module.css","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactItem.module.css","serviceWorker.js","redux/authReducer.js","redux/navigationReducer.js","redux/dialogsListReducer.js","redux/searchNewUserReducer.js","redux/dialogBodyReducer.js","redux/textAreaReducer.js","redux/contactsReducer.js","redux/profileReducer.js","redux/reduxStore.js","vars_css/vars_css.js","ContainerApp/AuthPage/AuthPage.js","ContainerApp/AuthPage/AuthPageContainer.js","ContainerApp/WorkPlace/Navbar/Navbar.js","ContainerApp/WorkPlace/Navbar/NavbarContainer.js","ContainerApp/WorkPlace/Units/ProfileCard.js","ContainerApp/WorkPlace/Units/ChangeProfileCard.js","ContainerApp/WorkPlace/AppPages/ProfilePage/ProfilePage.js","ContainerApp/WorkPlace/AppPages/ProfilePage/ProfilePageContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsItem.js","img/icons/IconAdd.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsList.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsListContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/SearchNewUser.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/SearchNewUserContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/ContainerForSearchNewUser.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/MessageItem.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/DialogBody.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/DialogBodyContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/TextArea.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/TextAreaContainer.js","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/Dialog.js","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsPage.js","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactItem.js","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsList.js","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsListContainer.js","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsPage.js","ContainerApp/WorkPlace/AppPages/AppPages.js","ContainerApp/WorkPlace/AppPages/AppPagesContainer.js","ContainerApp/WorkPlace/WorkPlace.js","App.js","ContainerApp/WorkPlace/WorkPlaceContainer.js","routes.js","AppContainer.js","index.js","ContainerApp/WorkPlace/AppPages/ProfilePage/ProfilePage.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/MessageItem.module.css","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsList.module.css","ContainerApp/AuthPage/AuthPage.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/DialogsList.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsList/SearchNewUser.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/DialogBody.module.css","ContainerApp/WorkPlace/WorkPlace.module.css","ContainerApp/WorkPlace/Navbar/Navbar.module.css","ContainerApp/WorkPlace/AppPages/AppPages.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/DialogsPage.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/Dialog.module.css","ContainerApp/WorkPlace/AppPages/DialogsPage/Dialog/TextArea.module.css","ContainerApp/WorkPlace/AppPages/ContactsPage/ContactsPage.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","CHANGE_INPUTS","REGISTRATION","LOGIN","initialeState","email","password","registrationActionCreator","isLoad","newUser","type","loginActionCreator","token","id","authReducer","state","action","userId","GET_NEW_MESSAGES","newMessages","navigationReducer","data","dialogId","UPLOAD_DIALOGS","CHECK_NEW_MESSAGES","RELOAD_DIALOGS","dialogsReducer","dialogs","forEach","dialog","newMsgs","messages","length","lastMsg","upDialog","UPDATE_EMAIL","GET_NEW_USER","REDIRECT_NEW_USER","newContact","getNewUserActionCreator","changed","redirectNewUserActionCreator","redirect","searchNewUserReducer","update","ID_DIALOG","UPLOAD_DIALOG","currentDialog","dialogIdActionCreator","uploadDialogActionCreator","dialogBodyReducer","CHANGE_NEW_MESSAGE","newMessage","changeNewMessageActionCreator","textAreaReducer","UPLOAD_CONTACTS","RELOAD_CONTACTS","CONTACT_CARD","contactCardActionCreator","contactCard","contactsReducer","contacts","userBirthday","undefined","dataArr","split","slice","join","GET_USER_DATA","CHANGE_USER_DATA","UPDATE_USER_DATA","RELOAD_USER_DATA","changePage","getUserDataActionCreator","userData","changeUserDataActionCreator","change","updateDataActionCreator","itemName","itemValue","disabled","profileReducer","userPhoto","firstName","lastName","userSex","LOG_OUT","reducers","combineReducers","authPage","navBar","profilePage","dialogsList","dialogsListReducer","searchNewUser","dialogPage","textArea","contactsPage","store","createStore","localStorage","clear","varsCss","mainTextColor","mainColor","navTextColor","accentTextColor","accentColor","accentColorFill","AuthPage","props","changeState","e","document","querySelector","value","pass","target","name","changeInputValueActionCreator","dispatch","postAuthData","axios","method","url","authState","then","response","userEmail","catch","error","JSON","parse","request","M","toast","html","message","setTimeout","reload","setItem","stringify","getAuthData","console","log","completeCallback","disabledBtn","className","classes","body","showItem","isShow","container","cssVars","label","onChange","validate","bntsSet","small","style","waves","onClick","AuthPageContainer","connect","Navbar","dialogsCount","to","color","paddingLeft","NavbarContainer","ProfileCard","changeBtn","logoutBtn","redirectToDialog","contactAction","dialogAction","profile","backgroundImage","discriptionText","arr","btns","map","btn","btnFunc","btnStyle","btnName","Math","random","ChangeProfileCard","changeInputs","selectedOptions","multiple","defaultValue","readOnly","d","m","dataset","month","Number","day","newDate","year","options","format","yearRange","changedData","socket","emit","ProfilePage","getItem","on","a","closeBtn","floating","icon","ProfilePageContainer","DialogsItem","userInfo","photo","user_name","newMsgsContainer","IconAdd","xmlns","xmlnsXlink","version","x","y","viewBox","enableBackground","xmlSpace","width","fill","createDialogs","lastMsgs","push","sort","b","i","find","index","splice","unshift","this","exact","DialogsList","uploadDialogsActionCreator","preloaderContainer","content","DialogsListContainer","updateEmailActionCreator","SearchNewUser","searchResult","isContact","visibleClass","disabledInput","actions","marginTop","maxWidth","marginLeft","newContactId","header","image","marginBottom","contactEmail","React","Component","SearchNewUserContainer","ContainerForSearchNewUser","MessageItem","userName","senderClass","user","fromUser","fromInterlocutor","description","fromSystem","sender","messageBody","createMessageList","user1","user2","creation","DialogBody","getDialog","newDeliveredMessagesIdArr","delivered","_id","onScroll","scrollMessages","scrollTop","scrollHeight","DialogBodyContainer","TextArea","interlocutor","sendBtn","node","Date","now","TextAreaContainer","Dialog","DialogsPage","path","render","ContactItem","userFirstName","userLastName","createContacstList","contactsArr","emailsArr","namesArr","contact","emailsContactArr","item","namesContactArr","concat","ContactsList","ContactsListContainer","ContactsPage","getContactsActionCreator","AppPages","isDialogsLoad","AppPagesContainer","io","process","WorkPlace","newMsgsData","action1","newMessagesActionCreator","action2","actionContacts","initiator","actionSearchNewUser","WorkPlaceContainer","App","isAuthenticated","routes","useRoutes","AppContainer","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ad11dd44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ProfileCard_body__2QXNj\",\"userPhoto\":\"ProfileCard_userPhoto__Hka_2\",\"discriptionText\":\"ProfileCard_discriptionText__Fwqjt\",\"input\":\"ProfileCard_input__3JDuf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"DialogsItem_body__SEl4a\",\"userInfo\":\"DialogsItem_userInfo__2XhTS\",\"userPhoto\":\"DialogsItem_userPhoto__1wZOk\",\"user_name\":\"DialogsItem_user_name__3EyqU\",\"newMsgsContainer\":\"DialogsItem_newMsgsContainer__1yppQ\",\"newMsgs\":\"DialogsItem_newMsgs__36HlF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ContactItem_body__3C_nb\",\"userInfo\":\"ContactItem_userInfo__3GnzR\",\"userPhoto\":\"ContactItem_userPhoto__1ZrAL\",\"user_name\":\"ContactItem_user_name__WFAgm\",\"newMsgsContainer\":\"ContactItem_newMsgsContainer__1LLPS\",\"newMsgs\":\"ContactItem_newMsgs__2J5T6\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const CHANGE_INPUTS = 'CHANGE_INPUTS';\r\nconst REGISTRATION = 'REGISTRATION';\r\nconst LOGIN = 'LOGIN';\r\n\r\nlet initialeState = {\r\n    email: \"\",\r\n    password: \"\"\r\n};\r\n\r\nconst authReducer = (state = initialeState, action) => {\r\n\r\n    switch (action.type) {\r\n        case CHANGE_INPUTS:\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                password: action.password,\r\n            };\r\n\r\n        case REGISTRATION:\r\n            return {\r\n                email: '',\r\n                password: '',\r\n                newUser: action.newUser,\r\n                isLoad: action.isLoad,\r\n            };\r\n\r\n        case LOGIN:\r\n            return {\r\n                ...state,\r\n                token: action.token,\r\n                userId: action.id,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const changeInputValueActionCreator = (email, password) => ({\r\n    type: CHANGE_INPUTS,\r\n    email: email,\r\n    password: password,\r\n});\r\nexport const registrationActionCreator = (isLoad, newUser) => ({\r\n    type: REGISTRATION,\r\n    isLoad,\r\n    newUser,\r\n});\r\nexport const loginActionCreator = (token, id) => ({\r\n    type: LOGIN,\r\n    token: token,\r\n    id: id,\r\n});\r\n\r\nexport default authReducer;","const GET_NEW_MESSAGES = 'GET_NEW_MESSAGES';\r\n\r\nlet initialeState = {\r\n    newMessages: {}\r\n};\r\n\r\nconst navigationReducer = (state = initialeState, action) => {\r\n    switch (action.type) {\r\n        case GET_NEW_MESSAGES:\r\n            return {\r\n                ...state,\r\n                newMessages: {\r\n                    ...state.newMessages,\r\n                    [action.data.dialogId]: action.data,\r\n                },\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const newMessagesActionCreator = (data) => ({\r\n    type: GET_NEW_MESSAGES,\r\n    data\r\n});\r\n\r\nexport default navigationReducer;","const UPLOAD_DIALOGS = 'UPLOAD_DIALOGS';\r\nconst CHECK_NEW_MESSAGES = 'CHECK_NEW_MESSAGES';\r\nconst RELOAD_DIALOGS = 'RELOAD_DIALOGS';\r\n\r\nlet initialeState = {\r\n};\r\n\r\nconst dialogsReducer = (state = initialeState, action) => {\r\n\r\n    switch (action.type) {\r\n        case UPLOAD_DIALOGS:\r\n            return {\r\n                ...state,\r\n                dialogs: action.data,\r\n                isLoad: action.isLoad\r\n            };\r\n\r\n        case CHECK_NEW_MESSAGES:\r\n\r\n            if (state.dialogs) {\r\n                state.dialogs.forEach(dialog => {\r\n                    if (action.dialogId === dialog.dialogId) {\r\n                        dialog.newMsgs = action.messages.length;\r\n                        dialog.lastMsg = action.lastMsg;\r\n                    };\r\n                });\r\n            };\r\n\r\n            if (action.messages.length > 0) {\r\n                return {\r\n                    ...state,\r\n                    upDialog: action.dialogId\r\n                };\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    upDialog: ''\r\n                };\r\n            };\r\n\r\n        case RELOAD_DIALOGS:\r\n            return {\r\n                ...state,\r\n                isLoad: false\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const uploadDialogsActionCreator = (isLoad, data) => ({\r\n    type: UPLOAD_DIALOGS,\r\n    isLoad,\r\n    data\r\n});\r\n\r\nexport const checkNewMessagesOnDialogListActionCreator = (dialogId, messages, lastMsg) => ({\r\n    type: CHECK_NEW_MESSAGES,\r\n    dialogId,\r\n    messages,\r\n    lastMsg,\r\n});\r\n\r\nexport const reloadDialogsActionCreator = () => ({\r\n    type: RELOAD_DIALOGS,\r\n});\r\n\r\nexport default dialogsReducer;","const UPDATE_EMAIL = 'UPDATE_EMAIL';\r\nconst GET_NEW_USER = 'GET_NEW_USER';\r\nconst REDIRECT_NEW_USER = 'REDIRECT_NEW_USER';\r\n\r\nlet initialeState = {\r\n    newContact: {\r\n        email: '',\r\n    },\r\n};\r\n\r\nconst searchNewUserReducer = (state = initialeState, action) => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_EMAIL:\r\n            return {\r\n                newContact: {\r\n                    email: action.update\r\n                },\r\n                changed: action.changed,\r\n                isLoad: action.isLoad\r\n            };\r\n\r\n        case GET_NEW_USER:\r\n            if (action.data === null) action.data = { email: '' }\r\n            return {\r\n                newContact: action.data,\r\n                changed: action.changed,\r\n                isLoad: action.isLoad,\r\n            };\r\n\r\n        case REDIRECT_NEW_USER:\r\n\r\n            if (action.redirect === false) {\r\n                return {\r\n                    newContact: {\r\n                        email: '',\r\n                    },\r\n                };\r\n            };\r\n            return {\r\n                newContact: {\r\n                    email: '',\r\n                },\r\n                redirect: action.redirect,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const updateEmailActionCreator = (update, changed, isLoad) => ({\r\n    type: UPDATE_EMAIL,\r\n    update,\r\n    changed,\r\n    isLoad\r\n});\r\nexport const getNewUserActionCreator = (data, changed, isLoad) => ({\r\n    type: GET_NEW_USER,\r\n    data,\r\n    changed,\r\n    isLoad\r\n});\r\nexport const redirectNewUserActionCreator = (redirect) => ({\r\n    type: REDIRECT_NEW_USER,\r\n    redirect,\r\n});\r\n\r\nexport default searchNewUserReducer;","const ID_DIALOG = 'ID_DIALOG';\r\nconst UPLOAD_DIALOG = 'UPLOAD_DIALOG';\r\n\r\nexport const dialogs = {\r\n    currentDialog: null,\r\n};\r\n\r\nlet initialeState = {\r\n    dialogId: '',\r\n    dialog: {\r\n        messages: [],\r\n    }\r\n};\r\n\r\nconst dialogBodyReducer = (state = initialeState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ID_DIALOG:\r\n\r\n            dialogs.currentDialog = action.dialogId;\r\n\r\n            if (!dialogs[action.dialogId]) {\r\n                return {\r\n                    ...state,\r\n                    dialogId: action.dialogId,\r\n                    isLoad: false,\r\n                };\r\n            };\r\n            return {\r\n                ...state,\r\n                dialogId: action.dialogId,\r\n                dialog: dialogs[action.dialogId],\r\n                isLoad: true,\r\n            };\r\n\r\n\r\n        case UPLOAD_DIALOG:\r\n\r\n            dialogs[action.dialog.dialogId] = action.dialog;\r\n\r\n            return {\r\n                ...state,\r\n                dialog: dialogs[dialogs.currentDialog],\r\n                isLoad: true,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const dialogIdActionCreator = (dialogId) => ({\r\n    type: ID_DIALOG,\r\n    dialogId\r\n});\r\nexport const uploadDialogActionCreator = (data) => ({\r\n    type: UPLOAD_DIALOG,\r\n    dialog: data,\r\n});\r\n\r\nexport default dialogBodyReducer;","const CHANGE_NEW_MESSAGE = 'CHANGE_NEW_MESSAGE';\r\n\r\nlet initialeState = {\r\n    newMessage: '',\r\n\r\n};\r\n\r\nconst textAreaReducer = (state = initialeState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case CHANGE_NEW_MESSAGE:\r\n            return {\r\n                newMessage: action.newMessage\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const changeNewMessageActionCreator = (newMessage) => ({\r\n    type: CHANGE_NEW_MESSAGE,\r\n    newMessage\r\n});\r\n\r\nexport default textAreaReducer;","const UPLOAD_CONTACTS = 'UPLOAD_CONTACTS';\r\nconst RELOAD_CONTACTS = 'RELOAD_CONTACTS';\r\nconst CONTACT_CARD = 'CONTACT_CARD';\r\n\r\nlet initialeState = {\r\n    isLoad: false\r\n};\r\n\r\nconst contactsReducer = (state = initialeState, action) => {\r\n\r\n    switch (action.type) {\r\n        case UPLOAD_CONTACTS:\r\n            return {\r\n                contacts: action.data,\r\n                isLoad: true,\r\n            };\r\n\r\n        case RELOAD_CONTACTS:\r\n            return {\r\n                ...state,\r\n                isLoad: false,\r\n            };\r\n        case CONTACT_CARD:\r\n            if (action.contactCard.userBirthday !== null && action.contactCard.userBirthday !== undefined) {\r\n                let dataArr = action.contactCard.userBirthday.split('');\r\n                action.contactCard.userBirthday = dataArr.slice(0, 10).join('');\r\n            };\r\n            return {\r\n                ...state,\r\n                contactCard: action.contactCard,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const getContactsActionCreator = (data) => ({\r\n    type: UPLOAD_CONTACTS,\r\n    data,\r\n});\r\n\r\nexport const reloadContactsActionCreator = () => ({\r\n    type: RELOAD_CONTACTS,\r\n});\r\n\r\nexport const contactCardActionCreator = (contactCard) => ({\r\n    type: CONTACT_CARD,\r\n    contactCard,\r\n});\r\n\r\nexport default contactsReducer;","const GET_USER_DATA = 'GET_USER_DATA';\r\nconst CHANGE_USER_DATA = 'CHANGE_USER_DATA';\r\nconst UPDATE_USER_DATA = 'UPDATE_USER_DATA';\r\nconst RELOAD_USER_DATA = 'RELOAD_USER_DATA';\r\n\r\n\r\nlet initialeState = {\r\n    id: null,\r\n    changed: false,\r\n    changePage: false,\r\n};\r\n\r\nconst profileReducer = (state = initialeState, action) => {\r\n    switch (action.type) {\r\n        case GET_USER_DATA:\r\n            let userBirthday = null;\r\n            if (action.userData.userBirthday !== null && action.userData.userBirthday !== undefined) {\r\n                let dataArr = action.userData.userBirthday.split('');\r\n                userBirthday = dataArr.slice(0, 10).join('');\r\n            };\r\n            return {\r\n                id: action.userData.id,\r\n                userPhoto: action.userData.userPhoto,\r\n                firstName: action.userData.firstName,\r\n                lastName: action.userData.lastName,\r\n                email: action.userData.email,\r\n                userSex: action.userData.userSex,\r\n                userBirthday: userBirthday,\r\n                changed: false,\r\n                changePage: false,\r\n            };\r\n\r\n        case CHANGE_USER_DATA:\r\n            return {\r\n                ...state,\r\n                changePage: action.change\r\n            };\r\n\r\n        case UPDATE_USER_DATA:\r\n            return {\r\n                ...state,\r\n                [action.itemName]: action.itemValue,\r\n                changed: true\r\n            };\r\n\r\n        case RELOAD_USER_DATA:\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nexport const getUserDataActionCreator = (userData) => ({\r\n    type: GET_USER_DATA,\r\n    userData\r\n});\r\nexport const changeUserDataActionCreator = (change) => ({\r\n    type: CHANGE_USER_DATA,\r\n    change\r\n});\r\nexport const updateDataActionCreator = (itemName, itemValue, disabled) => ({\r\n    type: UPDATE_USER_DATA,\r\n    itemName,\r\n    itemValue,\r\n    disabled\r\n});\r\nexport const reloadActionCreator = (id) => ({\r\n    type: RELOAD_USER_DATA,\r\n    id\r\n});\r\n\r\nexport default profileReducer;","import { createStore, combineReducers } from \"redux\";\r\nimport authReducer from './authReducer.js';\r\nimport navigationReducer from './navigationReducer.js';\r\nimport dialogsListReducer from './dialogsListReducer.js';\r\nimport searchNewUserReducer from './searchNewUserReducer.js';\r\nimport dialogBodyReducer from './dialogBodyReducer.js';\r\nimport textAreaReducer from './textAreaReducer.js';\r\nimport contactsReducer from './contactsReducer.js';\r\nimport profileReducer from './profileReducer.js';\r\n\r\nconst LOG_OUT = \"LOG_OUT\";\r\n\r\nlet reducers = combineReducers({\r\n    authPage: authReducer,\r\n    navBar: navigationReducer,\r\n    profilePage: profileReducer,\r\n    dialogsList: dialogsListReducer,\r\n    searchNewUser: searchNewUserReducer,\r\n    dialogPage: dialogBodyReducer,\r\n    textArea: textAreaReducer,\r\n    contactsPage: contactsReducer,\r\n});\r\n\r\nlet appStore = (state, action) => {\r\n    if (action.type === LOG_OUT) {\r\n        state = undefined;\r\n        localStorage.clear();\r\n    };\r\n    return reducers(state, action);\r\n};\r\n\r\nexport const logoutActionCreator = () => ({\r\n    type: LOG_OUT,\r\n});\r\n\r\nlet store = createStore(appStore);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","let varsCss = {\r\n    mainTextColor: \"blue-text\",\r\n    mainColor: \"blue\",\r\n    navTextColor: \"blue-text text-darken-4\",\r\n    accentTextColor: \"orange-text text-darken-2\",\r\n    accentColor: \"orange darken-2\",\r\n    accentColorFill: \"#f57c00\",\r\n};\r\n\r\n\r\nexport default varsCss;","import React from 'react';\r\nimport classes from './AuthPage.module.css';\r\nimport cssVars from '../../vars_css/vars_css';\r\nimport M from \"materialize-css\";\r\nimport * as axios from 'axios';\r\nimport { changeInputValueActionCreator, loginActionCreator, registrationActionCreator } from '../../redux/authReducer';\r\nimport { Button, Preloader, TextInput } from 'react-materialize';\r\n\r\n\r\nfunction AuthPage(props) {\r\n\r\n  let changeState = (e) => {\r\n    let email = document.querySelector('#email_inline').value;\r\n    let pass = document.querySelector('#password').value;\r\n    if (e.target.name === 'email') {\r\n      email = e.target.value;\r\n    };\r\n    if (e.target.name === 'password') {\r\n      pass = e.target.value;\r\n    };\r\n\r\n    let action = changeInputValueActionCreator(email, pass);\r\n    props.dispatch(action);\r\n  };\r\n\r\n  let getAuthData = (token, id) => {\r\n    localStorage.setItem('userData', JSON.stringify({ token, id }));\r\n    let action = loginActionCreator(token, id);\r\n    props.dispatch(action);\r\n  };\r\n\r\n  let postAuthData = (e) => {\r\n\r\n    if (e.target.name === \"register\") {\r\n      axios({\r\n        method: 'post',\r\n        url: '/api/auth/register',\r\n        data: props.authState\r\n      })\r\n        .then(response => {\r\n          let action = registrationActionCreator(false, response.data.userEmail);\r\n          props.dispatch(action);\r\n        })\r\n        .catch(function (error) {\r\n          error = JSON.parse(error.request.response);\r\n          M.toast({ html: `${error.message}` });\r\n          setTimeout(() => {\r\n            window.location.reload();\r\n          }, 1500)\r\n\r\n        });\r\n      let action = registrationActionCreator(true);\r\n      props.dispatch(action);\r\n    };\r\n    if (e.target.name === \"login\") {\r\n      axios({\r\n        method: 'post',\r\n        url: '/api/auth/login',\r\n        data: props.authState\r\n      })\r\n        .then(response => {\r\n          getAuthData(response.data.token, response.data.userId);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error.request);\r\n          error = JSON.parse(error.request.response);\r\n          M.toast({ html: `${error.message}`, completeCallback: function () { window.location.reload() } });\r\n        });\r\n    };\r\n  };\r\n\r\n  let disabledBtn = true;\r\n  if (props.authState.email !== \"\" || props.authState.password !== \"\") disabledBtn = false;\r\n\r\n  if (props.authState.isLoad) {\r\n    return (\r\n      <div className={classes.body}>\r\n        <Preloader />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let showItem = (isShow) => {\r\n    if (isShow) return 'displayBlock';\r\n    return 'noShowItem'\r\n  };\r\n\r\n  return (\r\n    <div className={classes.body}>\r\n      <div className={classes.container}>\r\n        <h3 className={cssVars.mainTextColor}>Log In</h3>\r\n        <h5 className={showItem(props.authState.newUser)}>New user<br />\"{`${props.authState.newUser}`}\"<br />created.<br />You can login</h5>\r\n        <TextInput\r\n          email\r\n          id=\"email_inline\"\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          onChange={changeState}\r\n          validate\r\n        />\r\n        <TextInput\r\n          password\r\n          id=\"password\"\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          onChange={changeState}\r\n        />\r\n\r\n        <div className={classes.bntsSet}>\r\n          <Button\r\n            className={`${cssVars.mainColor}`}\r\n            name=\"login\"\r\n            small\r\n            style={{\r\n              // marginRight: '5px'\r\n            }}\r\n            waves=\"light\"\r\n            disabled={disabledBtn}\r\n            onClick={postAuthData}\r\n          >Login</Button>\r\n          <Button\r\n            className={`${cssVars.accentColor} ${showItem(!props.authState.newUser)}`}\r\n            name=\"register\"\r\n            small\r\n            style={{\r\n              // marginRight: '5px'\r\n            }}\r\n            waves=\"light\"\r\n            disabled={disabledBtn}\r\n            onClick={postAuthData}\r\n          >Registration</Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthPage;\r\n","import { connect } from 'react-redux';\r\nimport AuthPage from './AuthPage';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    authState: state.authPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatch: (action) => {\r\n      dispatch(action);\r\n    },\r\n  };\r\n};\r\n\r\nconst AuthPageContainer = connect(mapStateToProps, mapDispatchToProps)(AuthPage);\r\n\r\n\r\nexport default AuthPageContainer;","import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport cssVars from './../../../vars_css/vars_css';\r\nimport { contactCardActionCreator } from '../../../redux/contactsReducer';\r\n\r\n\r\nfunction Navbar(props) {\r\n\r\n    let dialogsCount = 0;\r\n    for (const dialog in props.navBar.newMessages) {\r\n        if (props.navBar.newMessages[dialog].messages.length > 0) {\r\n            dialogsCount++;\r\n        };\r\n    };\r\n    let isShow = \"noShowItem\";\r\n    if (dialogsCount > 0) isShow = \"showItem\";\r\n\r\n    return (\r\n        <nav className={cssVars.mainColor}>\r\n            <div className=\"nav-wrapper\">\r\n                <ul id=\"nav-mobile\" className={`${classes.body} center`}>\r\n                    <li><NavLink to='/profile'>Profile</NavLink></li>\r\n                    <li><NavLink to='/dialogs'>\r\n                        {`Dialogs`}\r\n                        <span\r\n                            style={{ color: \"#FFD073\", paddingLeft: \"5px\", }}\r\n                            className={`${isShow}`}\r\n                        >\r\n                            {dialogsCount}\r\n                        </span>\r\n                    </NavLink></li>\r\n                    <li><NavLink\r\n                        onClick={() => {\r\n                            let action = contactCardActionCreator(false);\r\n                            props.dispatch(action);\r\n                        }}\r\n                        to='/contacts'\r\n                    >Contacts</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import { connect } from 'react-redux';\r\nimport Navbar from './Navbar';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        navBar: state.navBar,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n\r\nexport default NavbarContainer;","import React from 'react';\r\nimport classes from './ProfileCard.module.css';\r\nimport cssVars from '../../../vars_css/vars_css';\r\nimport { changeUserDataActionCreator } from '../../../redux/profileReducer';\r\nimport { logoutActionCreator } from '../../../redux/reduxStore';\r\nimport { contactCardActionCreator } from '../../../redux/contactsReducer';\r\nimport { dialogIdActionCreator } from '../../../redux/dialogBodyReducer';\r\n\r\nfunction ProfileCard(props) {\r\n\r\n    function createBtns(arr) {\r\n        return arr.map(btn => {\r\n            if (btn.btnFunc === 'changeBtn') btn.btnFunc = changeBtn;\r\n            if (btn.btnFunc === 'logoutBtn') btn.btnFunc = logoutBtn;\r\n            if (btn.btnFunc === 'redirectToDialog') btn.btnFunc = redirectToDialog;\r\n            return btn = <button key={Math.random() * Math.random()} className={`${cssVars[btn.btnStyle]} waves-effect waves-light btn`} name=\"change\" onClick={btn.btnFunc} >{btn.btnName}</button>;\r\n        });\r\n    };\r\n\r\n    function changeBtn() {\r\n        let action = changeUserDataActionCreator(true);\r\n        props.dispatch(action);\r\n\r\n    };\r\n    function logoutBtn() {\r\n        let action = logoutActionCreator();\r\n        props.dispatch(action);\r\n\r\n    };\r\n    function redirectToDialog() {\r\n\r\n        let contactAction = contactCardActionCreator(false);\r\n        props.dispatch(contactAction);\r\n        let dialogAction = dialogIdActionCreator(props.profile.dialogId);\r\n        props.dispatch(dialogAction);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.body}>\r\n            <div className={classes.userPhoto} style={{ backgroundImage: `url(${props.profile.userPhoto})` }} />\r\n            <p className={classes.discriptionText}>{props.profile.firstName}</p>\r\n            <p className={classes.discriptionText}>{props.profile.lastName}</p>\r\n            <p className={classes.discriptionText}>{props.profile.email}</p>\r\n            <p className={classes.discriptionText}>{props.profile.userSex}</p>\r\n            <p className={classes.discriptionText}>{props.profile.userBirthday}</p>\r\n            {createBtns(props.btns)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileCard;","import React from 'react';\r\nimport classes from './ProfileCard.module.css';\r\nimport { Select, TextInput, DatePicker, Button } from 'react-materialize';\r\nimport { socket } from '../WorkPlace';\r\nimport { updateDataActionCreator, reloadActionCreator } from '../../../redux/profileReducer';\r\n\r\nfunction ChangeProfileCard(props) {\r\n\r\n    function changeInputs(e) {\r\n        let action;\r\n        if (e.target.name === 'sex') {\r\n            action = updateDataActionCreator(e.target.name, e.target.selectedOptions[0].value, true);\r\n        } else {\r\n            action = updateDataActionCreator(e.target.name, e.target.value, true);\r\n        };\r\n\r\n        props.dispatch(action);\r\n\r\n    };\r\n\r\n    return (\r\n        <div className={classes.body}>\r\n            {/* <div className={classes.userPhoto} style={{ backgroundImage: `url(${props.profilePage.photo})` }} /> */}\r\n            <TextInput\r\n                id='profileNameInput'\r\n                label='First Name'\r\n                name='firstName'\r\n                value={props.profilePage.firstName}\r\n                onChange={(e) => { changeInputs(e) }}\r\n            />\r\n            <TextInput\r\n                id='profileLastNameInput'\r\n                label='Last Name'\r\n                name='lastName'\r\n                email={true}\r\n                value={props.profilePage.lastName}\r\n                onChange={(e) => { changeInputs(e) }}\r\n            />\r\n            <TextInput\r\n                id='profileEmailInput'\r\n                label='Email'\r\n                name='email'\r\n                value={props.profilePage.email}\r\n                onChange={(e) => { changeInputs(e) }}\r\n            />\r\n            <Select\r\n                id=\"profileSelect\"\r\n                label=\"Sex\"\r\n                name='userSex'\r\n                multiple={false}\r\n                onChange={(e) => { changeInputs(e) }}\r\n                defaultValue={props.profilePage.userSex}\r\n            >\r\n                <option disabled={true} value=\"\">Check your sex</option>\r\n                <option value=\"man\">man</option>\r\n                <option value=\"woman\">woman</option>\r\n            </Select>\r\n            <DatePicker\r\n                id=\"profileDatePicker\"\r\n                value={props.profilePage.userBirthday}\r\n                readOnly={true}\r\n                label='Birthday'\r\n                name='userBirthday'\r\n                onChange={() => {\r\n                    let d = document.querySelector('td.is-selected button');\r\n                    let m = d.dataset.month;\r\n                    m = Number(m) + 1;\r\n                    if (m < 10) m = '0' + m;\r\n                    let day = d.dataset.day;\r\n                    if (day < 10) day = '0' + Number(day);\r\n                    let newDate = `${d.dataset.year}-${m}-${day}`;\r\n                    let e = { target: {} };\r\n                    e.target.name = 'userBirthday';\r\n                    e.target.value = newDate;\r\n                    changeInputs(e);\r\n                }}\r\n                options={{\r\n                    format: 'yyyy-mm-dd',\r\n                    yearRange: 99,\r\n                }}\r\n            />\r\n            <Button\r\n                id='saveBtn'\r\n                className='blue'\r\n                disabled={!props.profilePage.changed}\r\n                onClick={() => {\r\n                    let changedData = {\r\n                        id: props.profilePage.id,\r\n                        firstName: props.profilePage.firstName,\r\n                        lastName: props.profilePage.lastName,\r\n                        email: props.profilePage.email,\r\n                        userBirthday: props.profilePage.userBirthday,\r\n                        userSex: props.profilePage.userSex,\r\n                        changed: true\r\n                    };\r\n                    socket.emit('profileData', changedData);\r\n                    let action = reloadActionCreator(null);\r\n                    props.dispatch(action);\r\n                }}\r\n            >Save</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChangeProfileCard;","import React from 'react';\r\nimport classes from './ProfilePage.module.css';\r\nimport { socket } from './../../WorkPlace';\r\nimport { getUserDataActionCreator, changeUserDataActionCreator } from './../../../../redux/profileReducer';\r\nimport { Button, Icon, Preloader } from 'react-materialize';\r\nimport ProfileCard from '../../Units/ProfileCard';\r\nimport ChangeProfileCard from '../../Units/ChangeProfileCard';\r\n\r\nfunction ProfilePage(props) {\r\n\r\n    let userId = JSON.parse(localStorage.getItem('userData')).id;\r\n    let data = { id: userId }\r\n\r\n    socket.on(`${userId}Profile`, async userData => {\r\n\r\n        let action = getUserDataActionCreator(userData);\r\n        props.dispatch(action);\r\n\r\n    });\r\n\r\n    if (props.profilePage.id === null) {\r\n        socket.emit('profileData', data);\r\n        return (\r\n            <div className={classes.body}>\r\n                <Preloader />\r\n\r\n            </div>\r\n        );\r\n    };\r\n    if (props.profilePage.changePage === true) {\r\n\r\n        return (\r\n            <div className={classes.container}>\r\n                <div className={classes.body}>\r\n                    <Button\r\n                        className={`${classes.closeBtn} grey`}\r\n                        floating\r\n                        icon={<Icon>close</Icon>}\r\n                        small\r\n                        waves='light'\r\n                        onClick={() => {\r\n                            let action = changeUserDataActionCreator(false);\r\n                            props.dispatch(action);\r\n                        }}\r\n                    />\r\n                    <ChangeProfileCard profilePage={props.profilePage} dispatch={props.dispatch} />\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.body}>\r\n                <ProfileCard\r\n                    btns={[\r\n                        {\r\n                            btnFunc: 'changeBtn',\r\n                            btnStyle: 'mainColor',\r\n                            btnName: 'Change',\r\n\r\n                        },\r\n                        {\r\n                            btnFunc: 'logoutBtn',\r\n                            btnStyle: 'accentColor',\r\n                            btnName: 'Logout',\r\n\r\n                        },\r\n                    ]}\r\n                    profile={props.profilePage}\r\n                    dispatch={props.dispatch}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfilePage;","import { connect } from 'react-redux';\r\nimport ProfilePage from './ProfilePage';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst ProfilePageContainer = connect(mapStateToProps, mapDispatchToProps)(ProfilePage);\r\n\r\nexport default ProfilePageContainer;","import React from 'react';\r\nimport classes from './DialogsItem.module.css';\r\nimport varsCss from '../../../../../vars_css/vars_css';\r\n\r\nfunction DialogsItem(props) {\r\n\r\n  let isShow = \"noShowItem\";\r\n  if (props.data.newMsgs && props.data.newMsgs > 0) isShow = \"showItem\";\r\n\r\n  return (\r\n    <div className={classes.body}>\r\n      <div className={classes.userInfo}>\r\n        <div className={classes.userPhoto} style={{ backgroundImage: `url(${props.data.photo})` }} />\r\n        <div className={`${classes.user_name} ${varsCss.navTextColor}`}>{props.data.name}</div>\r\n        <div className={`${classes.user_name} ${varsCss.navTextColor}`}>{props.data.lastName}</div>\r\n      </div>\r\n      <div className={classes.newMsgsContainer}>\r\n        <div className={`${isShow} ${classes.newMsgs} ${varsCss.accentTextColor}`}>{props.data.newMsgs}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogsItem;\r\n","import React from 'react';\r\n\r\nfunction IconAdd(props) {\r\n    return (\r\n        <svg className=\"icon-add\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" id=\"layer_1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 150 150\" enableBackground=\"new 0 0 150 150\" xmlSpace=\"preserve\" width={props.width} fill={props.fill}>\r\n            <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M112.5,72.5h-35v-35c0-1.4-1.1-2.5-2.5-2.5l0,0c-1.4,0-2.5,1.1-2.5,2.5v35h-35c-1.4,0-2.5,1.1-2.5,2.5l0,0  c0,1.4,1.1,2.5,2.5,2.5h35v35c0,1.4,1.1,2.5,2.5,2.5l0,0c1.4,0,2.5-1.1,2.5-2.5v-35h35c1.4,0,2.5-1.1,2.5-2.5l0,0  C115,73.6,113.9,72.5,112.5,72.5z\" />\r\n            <path xmlns=\"http://www.w3.org/2000/svg\" d=\"M75.8,141.8c-37.5,0-68-30.5-68-68s30.5-68,68-68s68,30.5,68,68S113.3,141.8,75.8,141.8z M75.8,10.8c-34.7,0-63,28.3-63,63  s28.3,63,63,63s63-28.3,63-63S110.6,10.8,75.8,10.8z\" />\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default IconAdd;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { socket } from '../../../WorkPlace';\r\nimport { uploadDialogsActionCreator } from '../../../../../redux/dialogsListReducer';\r\nimport { dialogIdActionCreator } from '../../../../../redux/dialogBodyReducer';\r\nimport DialogsItem from './DialogsItem';\r\nimport classes from './DialogsList.module.css';\r\nimport IconAdd from '../../../../../img/icons/IconAdd';\r\nimport varsCss from '../../../../../vars_css/vars_css';\r\nimport { Preloader } from 'react-materialize';\r\n\r\n\r\nlet createDialogs = (dialogs, dialogId, dispatch) => {\r\n\r\n    if (dialogs !== undefined) {\r\n        if (dialogId !== '') {\r\n\r\n            let lastMsgs = [];\r\n            dialogs.forEach(d => {\r\n                if (d.lastMsg) lastMsgs.push(d.lastMsg);\r\n            });\r\n            lastMsgs.sort((a, b) => a - b);\r\n            lastMsgs.forEach(i => {\r\n                dialogs.find(function (dialog, index, arr) {\r\n                    if (dialog.lastMsg === i) {\r\n                        arr.splice(index, 1);\r\n                        arr.unshift(dialog);\r\n                    };\r\n                    return this;\r\n                });\r\n            });\r\n        };\r\n        let dialogsItems = dialogs.map(dialog => {\r\n            return (\r\n                <NavLink\r\n                    exact to={`/dialogs/dialog/${dialog.dialogId}`}\r\n                    key={dialog.dialogId}\r\n                    onClick={() => {\r\n                        let action = dialogIdActionCreator(dialog.dialogId);\r\n                        dispatch(action);\r\n                    }}>\r\n                    <DialogsItem data={dialog} />\r\n                </NavLink>\r\n            );\r\n        });\r\n        return dialogsItems;\r\n    };\r\n};\r\n\r\n\r\nfunction DialogsList(props) {\r\n\r\n    if (!props.dialogsList.isLoad) {\r\n\r\n        socket.emit('dialogList', JSON.parse(localStorage.getItem('userData')).id);\r\n\r\n        let userId = JSON.parse(localStorage.getItem('userData')).id;\r\n        let dialogs = 0;\r\n        if (props.dialogsList.dialogs !== undefined) {\r\n            dialogs = props.dialogsList.dialogs.length;\r\n        };\r\n        socket.emit('updateDialogsList', userId, dialogs);\r\n        socket.on(`updateDialogsList${userId}`, data => {\r\n            let action = uploadDialogsActionCreator(true, data);\r\n            props.dispatch(action);\r\n        });\r\n\r\n        return (\r\n            <div className={classes.preloaderContainer}>\r\n                <Preloader />\r\n            </div>\r\n        );\r\n    };\r\n    if (props.dialogsList.dialogs.length === 0) {\r\n        return (\r\n            <div className={classes.preloaderContainer}>\r\n                <h5>no dialogs</h5>\r\n                <NavLink exact to={`/dialogs/add_new_user`}><IconAdd width=\"50px\" fill={varsCss.accentColorFill} /></NavLink>\r\n            </div>\r\n        );\r\n    };\r\n    let dialogId = '';\r\n    if (props.dialogsList.upDialog) dialogId = props.dialogsList.upDialog;\r\n    return (\r\n        <div className={classes.body}>\r\n            <div className={classes.content}>\r\n                {/* <Route exact path={`/dialogs`} render={() => createDialogs(props.dialogsList.dialogs, dialogId, props.dispatch)} /> */}\r\n                {createDialogs(props.dialogsList.dialogs, dialogId, props.dispatch)}\r\n            </div>\r\n            <NavLink exact to={`/dialogs/add_new_user`}><IconAdd width=\"50px\" fill={varsCss.accentColorFill} /></NavLink>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default DialogsList;","import { connect } from 'react-redux';\r\nimport DialogsList from './DialogsList';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsList: state.dialogsList,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst DialogsListContainer = connect(mapStateToProps, mapDispatchToProps)(DialogsList);\r\n\r\nexport default DialogsListContainer;","import React from 'react';\r\nimport classes from './SearchNewUser.module.css';\r\nimport varsCss from '../../../../../vars_css/vars_css';\r\nimport { Button, Card, CardTitle, Preloader, TextInput } from 'react-materialize';\r\nimport { getNewUserActionCreator, redirectNewUserActionCreator, updateEmailActionCreator } from '../../../../../redux/searchNewUserReducer';\r\nimport { socket } from '../../../WorkPlace';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { dialogIdActionCreator } from '../../../../../redux/dialogBodyReducer';\r\n\r\nlet changeInputs = function (dispatch, value, changed, isLoad) {\r\n  let action = updateEmailActionCreator(value, changed, isLoad);\r\n  dispatch(action);\r\n};\r\n\r\nclass SearchNewUser extends React.Component {\r\n\r\n  render() {\r\n\r\n    if (this.props.searchNewUser.redirect) {\r\n      let action = dialogIdActionCreator(this.props.searchNewUser.redirect);\r\n      this.props.dispatch(action);\r\n      return <Redirect to={`/dialogs/dialog/${this.props.searchNewUser.redirect}`} />\r\n    };\r\n\r\n    let showItem = (data) => {\r\n      if (data === '') {\r\n        return (\r\n          <div className='noShowItem'>{data}</div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div className='displayBlock'>{data}</div>\r\n        );\r\n      };\r\n    };\r\n\r\n    let buttonFnc = (isContact) => {\r\n      if (isContact) {\r\n        return (\r\n          <Button\r\n            small\r\n            key=\"goToDialog\"\r\n            style={{ marginTop: 0, marginLeft: '30px' }}\r\n            className={varsCss.accentColor}\r\n            onClick={() => {\r\n              let action = redirectNewUserActionCreator(this.props.searchNewUser.newContact.dialogId);\r\n              this.props.dispatch(action);\r\n            }}\r\n          >Go to dialog</Button>\r\n        );\r\n      };\r\n      return (\r\n        <Button\r\n          small\r\n          key=\"save\"\r\n          style={{ marginTop: 0, marginLeft: '30px' }}\r\n          className={varsCss.accentColor}\r\n          onClick={() => {\r\n            socket.emit('addNewContact', {\r\n              userId: JSON.parse(localStorage.getItem('userData')).id,\r\n              newContactId: this.props.searchNewUser.newContact.id\r\n            });\r\n            changeInputs(this.props.dispatch, '', false, 'loading');\r\n          }}\r\n        >Save</Button>\r\n      );\r\n    };\r\n\r\n    let searchResult;\r\n\r\n    let visibleClass = 'noShowItem';\r\n    let disabledInput = false;\r\n    if (this.props.searchNewUser.isLoad === 'loading') {\r\n      visibleClass = 'displayBlock';\r\n      disabledInput = true;\r\n      searchResult = <Preloader />;\r\n    };\r\n    if (this.props.searchNewUser.isLoad === true && this.props.searchNewUser.newContact.email === '') {\r\n      visibleClass = 'displayBlock';\r\n      searchResult = <Card\r\n        actions={[\r\n          <Button\r\n            small\r\n            key=\"close\"\r\n            style={{ marginTop: 0 }}\r\n            className={varsCss.mainColor}\r\n            onClick={() => changeInputs(this.props.dispatch, '', false, false)}>Close</Button>\r\n        ]}\r\n      >\r\n        User is not found\r\n    </Card>;\r\n    };\r\n    if (this.props.searchNewUser.isLoad && this.props.searchNewUser.newContact.email !== '') {\r\n      visibleClass = 'displayBlock';\r\n      searchResult = <Card\r\n        style={{\r\n          maxWidth: '300px',\r\n        }}\r\n        actions={[\r\n          <Button\r\n            small\r\n            key=\"close\"\r\n            style={{ marginTop: 0 }}\r\n            className={varsCss.mainColor}\r\n            onClick={() => changeInputs(this.props.dispatch, '', false, false)}\r\n          >Close</Button>,\r\n          buttonFnc(this.props.searchNewUser.newContact.isContact),\r\n        ]}\r\n        header={<CardTitle style={{ width: '100%' }} image={this.props.searchNewUser.newContact.userPhoto} />}\r\n      >\r\n        {showItem(this.props.searchNewUser.newContact.firstName)}\r\n        {showItem(this.props.searchNewUser.newContact.lastName)}\r\n        {this.props.searchNewUser.newContact.email}\r\n      </Card>;\r\n    };\r\n\r\n    return (\r\n      <div className={classes.body}>\r\n        <div className={classes.container}>\r\n          <h5 className={varsCss.navTextColor} style={{ marginBottom: \"30px\" }}>To search for a user enter his (her) e-mail</h5>\r\n          <TextInput\r\n            id='searchNewUserEmailInput'\r\n            label='Email'\r\n            name='email'\r\n            value={this.props.searchNewUser.newContact.email}\r\n            disabled={disabledInput}\r\n            onChange={(e) => {\r\n              let changed = true;\r\n              if (e.target.value === '') changed = false;\r\n              changeInputs(this.props.dispatch, e.target.value, changed, false);\r\n            }}\r\n          />\r\n          <Button\r\n            id='searchBtn'\r\n            className='blue'\r\n            disabled={!this.props.searchNewUser.changed}\r\n            onClick={() => {\r\n              socket.emit('findUser', { userId: JSON.parse(localStorage.getItem('userData')).id, contactEmail: this.props.searchNewUser.newContact.email });\r\n              changeInputs(this.props.dispatch, '', false);\r\n              let action = getNewUserActionCreator({ email: '' }, false, 'loading');\r\n              this.props.dispatch(action);\r\n            }}\r\n          >Search</Button>\r\n          <div className={`${classes.searchResult} ${visibleClass}`}>\r\n            {searchResult}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    let action = redirectNewUserActionCreator(false);\r\n    this.props.dispatch(action);\r\n  };\r\n};\r\n\r\nexport default SearchNewUser;\r\n","import { connect } from 'react-redux';\r\nimport SearchNewUser from './SearchNewUser';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        searchNewUser: state.searchNewUser,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst SearchNewUserContainer = connect(mapStateToProps, mapDispatchToProps)(SearchNewUser);\r\n\r\nexport default SearchNewUserContainer;","import React from 'react';\r\nimport { getNewUserActionCreator } from '../../../../../redux/searchNewUserReducer';\r\nimport { socket } from '../../../WorkPlace';\r\nimport SearchNewUserContainer from './SearchNewUserContainer';\r\n\r\nfunction ContainerForSearchNewUser(props) {\r\n\r\n  socket.on('newContact', data => {\r\n    let action = getNewUserActionCreator(data, false, true);\r\n    props.dispatch(action);\r\n  });\r\n\r\n  return <SearchNewUserContainer />;\r\n}\r\n\r\nexport default ContainerForSearchNewUser;\r\n","import React from 'react';\r\nimport classes from './MessageItem.module.css';\r\nimport varsCss from '../../../../../vars_css/vars_css';\r\n\r\nfunction MessageItem(props) {\r\n\r\n    let userName;\r\n    if (props.user.firstName !== '') {\r\n        userName = props.user.firstName;\r\n    } else {\r\n        userName = props.user.email;\r\n    };\r\n\r\n    let senderClass;\r\n\r\n    if (props.user.id === JSON.parse(localStorage.getItem('userData')).id) {\r\n        senderClass = classes.fromUser;\r\n        userName = 'You';\r\n    };\r\n    if (props.user.id !== JSON.parse(localStorage.getItem('userData')).id) senderClass = classes.fromInterlocutor;\r\n    if (props.description === 'system_message') senderClass = classes.fromSystem;\r\n\r\n    return (\r\n        <div className={`${classes.body} ${senderClass}`}>\r\n            <div className={`${classes.sender} ${varsCss.navTextColor}`}>{userName}</div>\r\n            <div className={classes.messageBody}>{props.messageBody}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport classes from './DialogBody.module.css';\r\nimport { socket } from '../../../WorkPlace';\r\nimport MessageItem from './MessageItem';\r\nimport { dialogIdActionCreator, dialogs } from '../../../../../redux/dialogBodyReducer';\r\nimport { Preloader } from 'react-materialize';\r\n\r\nfunction createMessageList(data) {\r\n\r\n    if (data.isLoad) {\r\n        let messages = [];\r\n        data.dialog.messages.map(message => {\r\n            if (message.to === data.dialog.user1.id) {\r\n                return messages.push(<MessageItem key={Math.random()} to={message.to} messageBody={message.messageBody} user={data.dialog.user2} creation={message.creation} description={message.description} />);\r\n            };\r\n            return messages.push(<MessageItem key={Math.random()} to={message.to} messageBody={message.messageBody} user={data.dialog.user1} creation={message.creation} description={message.description} />);\r\n        });\r\n        return messages;\r\n    };\r\n};\r\n\r\nclass DialogBody extends React.Component {\r\n\r\n    render() {\r\n\r\n        if (!this.props.dialogPage.isLoad) {\r\n            socket.emit('uploadDialog', { dialogId: this.props.dialogPage.dialogId, getDialog: true });\r\n\r\n            return (\r\n                <div className={classes.preloaderContainer}>\r\n                    <Preloader />\r\n                </div>\r\n            );\r\n        };\r\n\r\n        let userId = JSON.parse(localStorage.getItem('userData')).id;\r\n        let newDeliveredMessagesIdArr = [];\r\n\r\n        if (this.props.dialogPage.dialog.messages.length > 0) {\r\n            this.props.dialogPage.dialog.messages.map(message => {\r\n                if (message.to === userId && !message.delivered) {\r\n                    newDeliveredMessagesIdArr.push(message._id);\r\n                };\r\n                return message;\r\n            });\r\n        };\r\n\r\n        if (newDeliveredMessagesIdArr.length > 0) {\r\n            socket.emit('uploadDialog', {\r\n                dialogId: this.props.dialogPage.dialogId,\r\n                userId: userId,\r\n                newDeliveredMessagesIdArr\r\n            });\r\n        };\r\n\r\n        return (\r\n            <div className={classes.body} id='dialogArea'>\r\n                <div\r\n                    className={classes.content}\r\n                    onScroll={(e) => { console.log(e) }}\r\n                >\r\n                    {createMessageList(this.props.dialogPage)}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.props.dialogPage.isLoad && this.props.dialogPage.dialog.messages && this.props.dialogPage.dialog.messages.length > 0) {\r\n            let scrollMessages = document.querySelector('#dialogArea');\r\n            scrollMessages.scrollTop = scrollMessages.scrollHeight;\r\n        };\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        let scrollMessages = document.querySelector('#dialogArea');\r\n        scrollMessages.scrollTop = scrollMessages.scrollHeight;\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        dialogs.currentDialog = null;\r\n        let action = dialogIdActionCreator('');\r\n        this.props.dispatch(action);\r\n    };\r\n};\r\n\r\n\r\nexport default DialogBody;","import { connect } from 'react-redux';\r\nimport DialogBody from './DialogBody';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst DialogBodyContainer = connect(mapStateToProps, mapDispatchToProps)(DialogBody);\r\n\r\nexport default DialogBodyContainer;","import React from 'react';\r\nimport classes from './TextArea.module.css';\r\nimport { Textarea, Button, Icon } from 'react-materialize';\r\nimport varsCss from '../../../../../vars_css/vars_css';\r\nimport { changeNewMessageActionCreator } from '../../../../../redux/textAreaReducer';\r\nimport { socket } from '../../../WorkPlace';\r\n\r\n\r\nfunction TextArea(props) {\r\n\r\n    let user = JSON.parse(localStorage.getItem('userData')).id;\r\n    let interlocutor;\r\n\r\n    if (props.dialog && props.dialog.user1) {\r\n        if (props.dialog.user1.id !== user) {\r\n            interlocutor = props.dialog.user1.id\r\n        } else {\r\n            interlocutor = props.dialog.user2.id\r\n        };\r\n    };\r\n\r\n    let sendBtn = true;\r\n    if (props.textArea.newMessage !== '') sendBtn = false;\r\n\r\n    return (\r\n        <div className={`${classes.body} ${varsCss.mainColor}`}>\r\n            <Textarea\r\n                className={`white`}\r\n                value={props.textArea.newMessage}\r\n                onChange={(e) => {\r\n                    let action = changeNewMessageActionCreator(e.target.value);\r\n                    props.dispatch(action);\r\n                }}\r\n            />\r\n            <Button\r\n                className={varsCss.accentColor}\r\n                node=\"button\"\r\n                type=\"submit\"\r\n                waves=\"light\"\r\n                disabled={sendBtn}\r\n                onClick={() => {\r\n                    socket.emit('uploadDialog', {\r\n                        dialogId: props.dialog.dialogId,\r\n                        user,\r\n                        interlocutor,\r\n                        messageBody: props.textArea.newMessage,\r\n                        creation: Date.now(),\r\n                    });\r\n                    let action = changeNewMessageActionCreator('');\r\n                    props.dispatch(action);\r\n                }}\r\n            ><Icon>send</Icon>\r\n            </Button>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default TextArea;","import { connect } from 'react-redux';\r\nimport TextArea from './TextArea';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        textArea: state.textArea,\r\n        dialog: state.dialogPage.dialog\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst TextAreaContainer = connect(mapStateToProps, mapDispatchToProps)(TextArea);\r\n\r\nexport default TextAreaContainer;","import React from 'react';\r\nimport classes from './Dialog.module.css';\r\nimport DialogBodyContainer from './DialogBodyContainer';\r\nimport TextAreaContainer from './TextAreaContainer';\r\n\r\nfunction Dialog() {\r\n    return (\r\n        <div className={classes.body}>\r\n            <TextAreaContainer />\r\n            <DialogBodyContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport classes from './DialogsPage.module.css';\r\nimport DialogsListContainer from './DialogsList/DialogsListContainer';\r\nimport ContainerForSearchNewUser from './DialogsList/ContainerForSearchNewUser';\r\nimport Dialog from './Dialog/Dialog';\r\n\r\nfunction DialogsPage(props) {\r\n    return (\r\n        <div className={classes.body}>\r\n            <Route exact path='/dialogs' render={() => <DialogsListContainer />} />\r\n            <Route path='/dialogs/dialog' render={() => <Dialog />} />\r\n            <Route path='/dialogs/add_new_user' render={() => <ContainerForSearchNewUser dispatch={props.dispatch} />} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogsPage;","import React from 'react';\r\nimport varsCss from '../../../../vars_css/vars_css';\r\nimport classes from './ContactItem.module.css';\r\n\r\nfunction ContactItem(props) {\r\n\r\n  let isShow = \"noShowItem\";\r\n  let userFirstName;\r\n  let userLastName;\r\n\r\n  if (props.data.firstName === '') {\r\n    userFirstName = props.data.email;\r\n    userLastName = '';\r\n  } else {\r\n    userFirstName = props.data.firstName;\r\n    userLastName = props.data.lastName;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.body}>\r\n      <div className={classes.userInfo}>\r\n        <div className={classes.userPhoto} style={{ backgroundImage: `url(${props.data.userPhoto})` }} />\r\n        <div className={`${classes.user_name} ${varsCss.navTextColor}`}>{userFirstName}</div>\r\n        <div className={`${classes.user_name} ${varsCss.navTextColor}`}>{userLastName}</div>\r\n      </div>\r\n      <div className={classes.newMsgsContainer}>\r\n        <div className={`${isShow} ${classes.newMsgs} ${varsCss.accentTextColor}`}>{props.data.newMsgs}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactItem;\r\n","import React from 'react';\r\nimport { Preloader } from 'react-materialize';\r\nimport classes from './ContactsList.module.css';\r\nimport { socket } from '../../WorkPlace';\r\nimport ContactItem from './ContactItem';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { contactCardActionCreator } from '../../../../redux/contactsReducer';\r\nimport ProfileCard from '../../Units/ProfileCard';\r\n\r\n\r\nlet createContacstList = (contactsArr, dispatch) => {\r\n\r\n    // start sort contacts\r\n    let emailsArr = [];\r\n    let namesArr = [];\r\n\r\n    contactsArr.forEach(contact => {\r\n        if (contact.firstName !== '') {\r\n            namesArr.push(contact.firstName);\r\n        } else {\r\n            emailsArr.push(contact.email);\r\n        };\r\n    });\r\n\r\n    emailsArr.sort();\r\n    namesArr.sort();\r\n\r\n    let emailsContactArr = emailsArr.map(contact => {\r\n        contactsArr.forEach(item => {\r\n            if (item.email === contact) contact = item;\r\n        });\r\n        return contact;\r\n    });\r\n    let namesContactArr = namesArr.map(contact => {\r\n        contactsArr.forEach(item => {\r\n            if (item.firstName === contact) contact = item;\r\n        });\r\n        return contact;\r\n    });\r\n\r\n    let sortContactsArr = [].concat(emailsContactArr, namesContactArr);\r\n    // end sort contacts\r\n\r\n    let contacts = sortContactsArr.map(contact => {\r\n        return (\r\n            <NavLink\r\n                exact to={`/contacts/contact/${contact.id}`}\r\n                key={contact.id}\r\n                onClick={() => {\r\n                    let action = contactCardActionCreator(contact);\r\n                    dispatch(action);\r\n                }}>\r\n                <ContactItem data={contact} />\r\n            </NavLink>\r\n        );\r\n    });\r\n    return contacts;\r\n};\r\n\r\nfunction ContactsList(props) {\r\n\r\n    if (!props.contactsPage.isLoad) {\r\n        socket.emit('uploadContacts', { userId: JSON.parse(localStorage.getItem('userData')).id });\r\n        return (\r\n            <div className={classes.preloaderContainer}>\r\n                <Preloader />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    if (props.contactsPage.contacts.length === 0) {\r\n        return (\r\n            <div className={classes.preloaderContainer}>\r\n                <h5>no contacts</h5>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    if (props.contactsPage.contactCard) {\r\n        return (\r\n            <div className={classes.preloaderContainer}>\r\n                <ProfileCard\r\n                    btns={[\r\n                        {\r\n                            btnFunc: 'redirectToDialog',\r\n                            btnStyle: 'accentColor',\r\n                            btnName: 'Go to dialog',\r\n\r\n                        },\r\n                    ]}\r\n                    profile={props.contactsPage.contactCard}\r\n                    dispatch={props.dispatch}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={classes.body}>\r\n            <div className={classes.content}>\r\n                {createContacstList(props.contactsPage.contacts, props.dispatch)}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactsList;","import { connect } from 'react-redux';\r\nimport ContactsList from './ContactsList';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        contactsPage: state.contactsPage,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst ContactsListContainer = connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n\r\nexport default ContactsListContainer;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { getContactsActionCreator } from '../../../../redux/contactsReducer';\r\nimport { socket } from '../../WorkPlace';\r\nimport ContactsListContainer from './ContactsListContainer';\r\nimport classes from './ContactsPage.module.css';\r\n\r\nfunction ContactsPage(props) {\r\n\r\n    socket.on('uploadContacts', data => {\r\n        let action = getContactsActionCreator(data.contactsArr);\r\n        props.dispatch(action);\r\n    });\r\n\r\n    return (\r\n        <div className={classes.body}>\r\n            <Route path='/contacts' render={() => <ContactsListContainer />} />\r\n        </div>);\r\n};\r\n\r\nexport default ContactsPage;","import React from 'react';\r\nimport classes from './AppPages.module.css';\r\nimport { Route } from 'react-router-dom';\r\nimport ProfilePageContainer from './ProfilePage/ProfilePageContainer';\r\nimport DialogsPage from './DialogsPage/DialogsPage';\r\nimport ContactsPage from './ContactsPage/ContactsPage';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { socket } from '../WorkPlace';\r\n\r\n\r\nfunction AppPages(props) {\r\n\r\n  const userId = JSON.parse(localStorage.getItem('userData')).id;\r\n  socket.emit('isOnline', { userId: userId, isDialogsLoad: props.isDialogsLoad });\r\n\r\n  let redirectFnc = function (redirect) {\r\n    if (redirect !== '' && redirect !== undefined) {\r\n      return <Redirect to={`/dialogs/dialog/${redirect}`} />;\r\n    };\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.body}>\r\n      <Route path='/profile' render={() => <ProfilePageContainer />} />\r\n      <Route path='/dialogs' render={() => <DialogsPage dispatch={props.dispatch} />} />\r\n      <Route path='/contacts' render={() => <ContactsPage dispatch={props.dispatch} />} />\r\n      {redirectFnc(props.dialogId)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppPages;","import { connect } from 'react-redux';\r\nimport AppPages from './AppPages';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogId: state.dialogPage.dialogId,\r\n        isDialogsLoad: state.dialogsList.isLoad,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst AppPagesContainer = connect(mapStateToProps, mapDispatchToProps)(AppPages);\r\n\r\nexport default AppPagesContainer;","import React from 'react';\r\nimport classes from './WorkPlace.module.css';\r\nimport NavbarContainer from './Navbar/NavbarContainer';\r\nimport AppPagesContainer from './AppPages/AppPagesContainer';\r\nimport io from 'socket.io-client';\r\nimport { dialogs, uploadDialogActionCreator } from '../../redux/dialogBodyReducer';\r\nimport { newMessagesActionCreator } from '../../redux/navigationReducer';\r\nimport { checkNewMessagesOnDialogListActionCreator, reloadDialogsActionCreator } from '../../redux/dialogsListReducer';\r\nimport { reloadContactsActionCreator } from '../../redux/contactsReducer';\r\nimport { redirectNewUserActionCreator } from '../../redux/searchNewUserReducer';\r\nimport { baseUrl } from '../../App';\r\n\r\nexport let socket = io.connect(baseUrl(process.env.NODE_ENV));\r\n\r\n\r\nfunction WorkPlace(props) {\r\n\r\n  const userId = JSON.parse(localStorage.getItem('userData')).id;\r\n\r\n  socket.on('getDialog', data => {\r\n\r\n    let action = uploadDialogActionCreator(data);\r\n    props.dispatch(action);\r\n  });\r\n\r\n  socket.on(`newMessageTo${userId}`, data => {\r\n\r\n    let action = uploadDialogActionCreator(data);\r\n    props.dispatch(action);\r\n\r\n    let newMsgs = [];\r\n    if (data.dialogId !== dialogs.currentDialog) {\r\n      data.messages.map(m => {\r\n        if (!m.delivered && m.to === userId) {\r\n          newMsgs.push(m);\r\n        };\r\n        return m;\r\n      });\r\n    };\r\n    let newMsgsData = {\r\n      dialogId: data.dialogId,\r\n      messages: newMsgs,\r\n      lastMsg: data.messages[(data.messages.length - 1)].creation,\r\n    };\r\n\r\n    let action1 = newMessagesActionCreator(newMsgsData);\r\n    props.dispatch(action1);\r\n    let action2 = checkNewMessagesOnDialogListActionCreator(newMsgsData.dialogId, newMsgsData.messages, newMsgsData.lastMsg);\r\n    props.dispatch(action2);\r\n  });\r\n\r\n\r\n  socket.on(`addNewContact${userId}`, data => {\r\n\r\n    let actionContacts = reloadContactsActionCreator();\r\n    props.dispatch(actionContacts);\r\n\r\n    socket.emit('updateDialogsList', JSON.parse(localStorage.getItem('userData')).id);\r\n\r\n    if (data.initiator === userId) {\r\n      let actionSearchNewUser = redirectNewUserActionCreator(data.newContact.dialogId);\r\n      props.dispatch(actionSearchNewUser);\r\n    };\r\n\r\n    if (data.initiator !== userId) {\r\n      // socket.emit('uploadDialog', { dialogId: data.newContact.dialogId, contactId: userId });\r\n      let action = reloadDialogsActionCreator('reload');\r\n      props.dispatch(action);\r\n    };\r\n  });\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.body}>\r\n      <NavbarContainer />\r\n      <AppPagesContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorkPlace;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { useRoutes } from './routes';\r\nimport { loginActionCreator } from './redux/authReducer';\r\n\r\nexport function baseUrl(node_env) {\r\n  if (node_env === 'development') return 'http://localhost:5000';\r\n  return 'https://simple--messenger.herokuapp.com';\r\n};\r\n\r\nfunction App(props) {\r\n\r\n  let isAuthenticated = !!props.authState.token;\r\n\r\n  if ((localStorage.userData !== undefined) && (isAuthenticated === false)) {\r\n    let data = JSON.parse(localStorage.userData);\r\n    let action = loginActionCreator(data.token, data.id);\r\n    props.dispatch(action);\r\n  };\r\n\r\n\r\n  const routes = useRoutes(isAuthenticated);\r\n  return (\r\n    <div className=\"App\">\r\n      {routes}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { connect } from 'react-redux';\r\nimport WorkPlace from './WorkPlace';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        // dialogId: state.dialogPage.dialogId,\r\n    };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        dispatch: (action) => {\r\n            dispatch(action);\r\n        },\r\n    };\r\n};\r\n\r\nconst WorkPlaceContainer = connect(mapStateToProps, mapDispatchToProps)(WorkPlace);\r\n\r\nexport default WorkPlaceContainer;","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport AuthPageContainer from './ContainerApp/AuthPage/AuthPageContainer';\r\nimport WorkPlaceContainer from './ContainerApp/WorkPlace/WorkPlaceContainer';\r\n\r\n\r\nexport const useRoutes = (isAuthenticated) => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route path='/profile' render={() => <WorkPlaceContainer />} />\r\n                <Route path='/dialogs' render={() => <WorkPlaceContainer />} />\r\n                <Route path='/contacts' render={() => <WorkPlaceContainer />} />\r\n                <Redirect to='/dialogs' />\r\n            </Switch>\r\n        );\r\n    };\r\n    return (\r\n        <Switch>\r\n            <Route exact path='/' render={() => <AuthPageContainer />} />\r\n            <Redirect to='/' />\r\n        </Switch>\r\n    );\r\n};","import { connect } from 'react-redux';\r\nimport App from './App';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    authState: state.authPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    dispatch: (action) => {\r\n      dispatch(action);\r\n    },\r\n  };\r\n};\r\n\r\nconst AppContainer = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nexport default AppContainer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/reduxStore.js';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport AppContainer from './AppContainer';\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister(); ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProfilePage_container__2YxQl\",\"body\":\"ProfilePage_body__pUQNv\",\"closeBtn\":\"ProfilePage_closeBtn__X-Ux8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"MessageItem_body__2DKle\",\"sender\":\"MessageItem_sender__3lgnW\",\"fromUser\":\"MessageItem_fromUser__3uPRb\",\"fromInterlocutor\":\"MessageItem_fromInterlocutor__1O6cK\",\"messageBody\":\"MessageItem_messageBody__1vPRc\",\"fromSystem\":\"MessageItem_fromSystem__3QYG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ContactsList_body__ji0bU\",\"content\":\"ContactsList_content__2otnV\",\"preloaderContainer\":\"ContactsList_preloaderContainer__wJLwh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"AuthPage_body__UKA5d\",\"container\":\"AuthPage_container__1ErkF\",\"bntsSet\":\"AuthPage_bntsSet__2qiu5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"DialogsList_body__o4bAz\",\"content\":\"DialogsList_content__UFbrw\",\"preloaderContainer\":\"DialogsList_preloaderContainer__1KmdS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"SearchNewUser_body__3qZak\",\"container\":\"SearchNewUser_container__3YEpz\",\"searchResult\":\"SearchNewUser_searchResult__2vN1J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"DialogBody_body__1ISCj\",\"content\":\"DialogBody_content__2JXWN\",\"preloaderContainer\":\"DialogBody_preloaderContainer__Qi1LQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"WorkPlace_body__2tSNu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Navbar_body__czvJ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"AppPages_body__2zqND\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"DialogsPage_body__1Btte\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Dialog_body__1o6qv\",\"preloaderContainer\":\"Dialog_preloaderContainer__3ej52\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"TextArea_body__Se-37\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"ContactsPage_body__370XY\"};"],"sourceRoot":""}